<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell查询数据库和发送邮件</title>
    <link href="/2023/02/12/Shell%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2023/02/12/Shell%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="脚本归档"><a href="#脚本归档" class="headerlink" title="脚本归档"></a>脚本归档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendmail.sh<br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#################################################################</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getDateStr</span></span>()<br>&#123;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-<span class="hljs-variable">$1</span> day&quot;</span> +%Y-%m-%d`<br>&#125;<br><br><span class="hljs-comment">#定义配置文件的地址</span><br>PROPERTY_FILE=<span class="hljs-string">&quot;~/conf/conf.properties&quot;</span><br><span class="hljs-comment">#数据库</span><br>db_name=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.host&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#用户名</span><br>db_username=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.username&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#密码</span><br>db_password=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.password&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#数据库</span><br>db=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.database&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#对账天数</span><br>max_day=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;size_day&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#存放对账总结果存放文件</span><br>reconcile_result=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;reconcile_result&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#存放对账详情存放文件 biz_type_diff_ + 1 “酒店直销TTS” 2 “酒店OTATTS” 3 “酒店国际业务” 4 “酒店一口价分销”</span><br>reconcile_diff_result=<span class="hljs-string">&#x27;~/out/biztypediff_&#x27;</span><br><span class="hljs-comment">#查询出来的邮件发送人</span><br>sendEmail=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;sendEmail&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#定义查询一句</span><br><br>date_str=`getDateStr <span class="hljs-string">&quot;<span class="hljs-variable">$max_day</span>&quot;</span>`<br><span class="hljs-comment">#构建查询语句</span><br>select_reconcileResult=<span class="hljs-string">&quot;select * from reconcile_result where reconcile_ts &lt; &#x27;<span class="hljs-variable">$&#123;date_str&#125;</span> 00:00:00&#x27;;&quot;</span><br><span class="hljs-comment">#执行查询语句</span><br>mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$select_reconcileResult</span>&quot;</span> &gt; <span class="hljs-variable">$reconcile_result</span><br><br><span class="hljs-comment">#$1为邮件发送人列表,$2为biztype</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">sendmail</span></span>()<br>&#123;<br><span class="hljs-keyword">if</span> [ -s $reconcile_diff_result<span class="hljs-variable">$2</span> ]<br><span class="hljs-keyword">then</span><br>        from=alert@xxx.com<br>        <span class="hljs-comment">#to=`cat $1`</span><br>        to=<span class="hljs-string">&quot;xxx.xx@xxx.com&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;table border=1&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        title=`<span class="hljs-built_in">cat</span> ~/conf/emailformat|grep <span class="hljs-string">&#x27;email_title&#x27;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> `<br>        <span class="hljs-comment">#分割字符串，变量OLD_IFS存着默认分隔符，IFS存着分隔符，用完之后还原分隔符</span><br>        OLD_IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>        IFS=<span class="hljs-string">&quot; &quot;</span><br>        arr=(<span class="hljs-variable">$title</span>)<br>        IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$OLD_IFS</span>&quot;</span><br>        <span class="hljs-keyword">for</span> titles <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;arr[@]&#125;</span><br>        <span class="hljs-keyword">do</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&quot;</span><span class="hljs-variable">$titles</span><span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-built_in">cat</span> $reconcile_diff_result<span class="hljs-variable">$2</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> diff_line<br>        <span class="hljs-keyword">do</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>&gt;&gt;mailcontent<br>                OLD_IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>                IFS=<span class="hljs-string">&quot; &quot;</span><br>                diff_line_arr=(<span class="hljs-variable">$diff_line</span>)<br>                IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$OLD_IFS</span>&quot;</span><br>                <span class="hljs-keyword">for</span> diff_item <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;diff_line_arr[@]&#125;</span><br>                <span class="hljs-keyword">do</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&quot;</span><span class="hljs-variable">$diff_item</span><span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>&gt;&gt;mailcontent<br>                <span class="hljs-keyword">done</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-comment">#具体邮件发送代码</span><br><br>        <span class="hljs-comment">#设置邮件发送日期</span><br>        email_date=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d_%H:%M:%S&quot;</span>)<br>        <span class="hljs-comment">#设置邮件标题</span><br>        email_subject=<span class="hljs-string">&quot;对账差异未处理提醒&quot;</span><span class="hljs-variable">$email_date</span><br>        <span class="hljs-comment">#发送邮件</span><br>        (<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Subject: <span class="hljs-variable">$email_subject</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;From: <span class="hljs-variable">$from</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;To: <span class="hljs-variable">$to</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-Type: text/html&quot;</span> ;<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> mailcontent`;)|/usr/lib/sendmail -t<br><span class="hljs-keyword">fi</span><br>sudo <span class="hljs-built_in">rm</span> mailcontent<br>&#125;<br><br><span class="hljs-comment">#查询出对账总结过对应的差异</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br><span class="hljs-keyword">do</span><br>        reconcile_id=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>        biztype=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>        mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;select id , trade_no , order_no,reconcile_ts ,reconcile_op_type , reconcile_direct , trade_amount , biz_type , status from reconcile_diff_detail where reconcile_result_id = &#x27;<span class="hljs-variable">$reconcile_id</span>&#x27; and invalid=0;&quot;</span>&gt;&gt;$reconcile_diff_result<span class="hljs-variable">$biztype</span><br>        <span class="hljs-comment">#查询邮件</span><br>        mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;select biz_type,email_address from reconcile_notify_email;&quot;</span>&gt;<span class="hljs-variable">$sendEmail</span><br><span class="hljs-keyword">done</span>&lt;<span class="hljs-variable">$reconcile_result</span><br><br><span class="hljs-comment">#发送邮件的代码</span><br><span class="hljs-built_in">ls</span> /home/xueping.you/out/biztypediff_*&gt;outfile<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br><span class="hljs-keyword">do</span><br>        biztype=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | grep <span class="hljs-string">&#x27;biztypediff&#x27;</span> | awk -F <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>        <span class="hljs-comment">#生成邮件接收人地址的字符串</span><br>        emailTo=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-built_in">cat</span> <span class="hljs-variable">$sendEmail</span>|grep <span class="hljs-variable">$biztype</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span><span class="hljs-string">&quot;;&quot;</span>;<span class="hljs-keyword">done</span> &gt; readysend<br>        sendmail <span class="hljs-string">&quot;readysend&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$biztype</span>&quot;</span><br><br><span class="hljs-keyword">done</span>&lt;outfile<br>sudo <span class="hljs-built_in">rm</span> outfile<br>sudo <span class="hljs-built_in">rm</span> /home/xueping.you/out/*<br>sudo <span class="hljs-built_in">rm</span> readysend<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql何登成文章笔记</title>
    <link href="/2023/02/12/Mysql%E4%BD%95%E7%99%BB%E6%88%90%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/12/Mysql%E4%BD%95%E7%99%BB%E6%88%90%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql名词解释-x2F-含义-x2F-读书笔记"><a href="#Mysql名词解释-x2F-含义-x2F-读书笔记" class="headerlink" title="Mysql名词解释&#x2F;含义&#x2F;读书笔记"></a>Mysql名词解释&#x2F;含义&#x2F;读书笔记</h1><h2 id="MVCC-Multiversion-concurrency-control"><a href="#MVCC-Multiversion-concurrency-control" class="headerlink" title="MVCC(Multiversion concurrency control)"></a>MVCC(Multiversion concurrency control)</h2><blockquote><p>MySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。</p><p>在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p></blockquote><h3 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h3><blockquote><p>简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)<br>select * from table where ?;</p></blockquote><h3 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h3><blockquote><p>当前读：特殊的读操作，插入&#x2F;更新&#x2F;删除操作，属于当前读，需要加锁。<br><code>select * from table where ? lock in share mode;</code> S锁<br>select * from table where ? for update; X锁<br>insert into table values (…);X锁<br>update table set ? where ?;X锁<br>delete from table where ?;X锁</p></blockquote><h2 id="clustered-index"><a href="#clustered-index" class="headerlink" title="clustered index"></a>clustered index</h2><blockquote><p>官方文档：<br>Every InnoDB table has a special index called the clustered index where the data for the rows is stored. Typically, the clustered index is synonymous with the primary key. To get the best performance from queries, inserts, and other database operations, you must understand how InnoDB uses the clustered index to optimize the most common lookup and <code>DML</code> operations for each table.</p><ul><li><p>If you define a <code>PRIMARY KEY</code> on your table, InnoDB uses it as the clustered index.(如果定义的主键，那么InnoDB会选择主键作为聚簇索引。)</p></li><li><p>If you do not define a <code>PRIMARY KEY</code> for your table, MySQL picks the first <code>UNIQUE</code> index that has only <code>NOT NULL</code> columns as the primary key and <code>InnoDB</code> uses it as the clustered index.(如果不存在主键，那么Mysql会选择一个唯一建并且唯一建列为Not Null作为InnoDB索引。)</p></li><li><p>If the table has no <code>PRIMARY KEY</code> or suitable <code>UNIQUE</code> index, <code>InnoDB</code> internally generates a hidden clustered index on a synthetic column containing row <code>ID</code> values. The rows are ordered by the <code>ID</code> that <code>InnoDB</code> assigns to the rows in such a table. The row <code>ID</code> is a 6-byte field that increases monotonically as new rows are inserted. Thus, the rows ordered by the row <code>ID</code> are physically in insertion order.(如果表主键和唯一建都不存在，那么InnoDB内部会生成一个隐藏的包含了列号值，并且作为聚簇索引。)</p></li></ul></blockquote><h2 id="2PL—Two-Phase-Locking：二阶段锁"><a href="#2PL—Two-Phase-Locking：二阶段锁" class="headerlink" title="2PL—Two-Phase Locking：二阶段锁"></a>2PL—Two-Phase Locking：二阶段锁</h2><blockquote><p>在数据库和会话程序中，使用2PL来保证线程安全，即获取锁与释放锁。2PL有两个原语：</p><p>-Expanding phase : locks are acquired and no locks are released;<br>-Shrinking phase : locks are released and no locks are acquired;<br>2PL定于区分了两种锁，Shared locks 和 Exclusive locks。</p><p>参见:<a href="https://en.wikipedia.org/wiki/Two-phase_locking">Two-phase locking</a></p></blockquote><h2 id="Mysql-事务隔离级别：Isolation-level"><a href="#Mysql-事务隔离级别：Isolation-level" class="headerlink" title="Mysql 事务隔离级别：Isolation level"></a>Mysql 事务隔离级别：Isolation level</h2><blockquote><p>在database systems中，isolations 决定事务对于其他用户和系统的可见性吗，PS：ACID（Atomicty,Consistency, Isolation, Durability）。</p></blockquote><h3 id="事务操作中出现的一些名词"><a href="#事务操作中出现的一些名词" class="headerlink" title="事务操作中出现的一些名词"></a>事务操作中出现的一些名词</h3><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><blockquote><p>在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几行(Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。</p></blockquote><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><blockquote><p>某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的，原因是事务能看到别的事务的未提交的结果。</p></blockquote><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><blockquote><p>在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据，原因是事务可以看到别的事务提交的结果。</p></blockquote><h3 id="四中隔离级别"><a href="#四中隔离级别" class="headerlink" title="四中隔离级别"></a>四中隔离级别</h3><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><blockquote><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p></blockquote><h4 id="Repeatable-reads"><a href="#Repeatable-reads" class="headerlink" title="Repeatable reads"></a>Repeatable reads</h4><blockquote><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题，GAP锁。</p></blockquote><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><blockquote><p> 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p></blockquote><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><blockquote><p>   在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p></blockquote><h4 id="分析一条Sql的加锁情况，参见何登成博文"><a href="#分析一条Sql的加锁情况，参见何登成博文" class="headerlink" title="分析一条Sql的加锁情况，参见何登成博文"></a>分析一条Sql的加锁情况，参见<a href="http://hedengcheng.com/?p=771">何登成</a>博文</h4><ul><li>Sql: select * from t1 where id&#x3D;10;</li><li>Sql: delete  from t1 where id&#x3D;10;<br>在回答这个问题之前我们需要明确几个前提条件：</li><li>前提一：id列是不是主键</li><li>当前数据库引擎的隔离级别是什么</li><li>Id列不是主键，那么Id列上面有无索引</li><li>Id列上面如果有二阶索引，那么Id是否是Unique Key</li><li>两个Sql的执行计划是什么？索引扫描？全表扫描？<br>另外一个Sql即便通过分析结论会使用索引，但实际执行计划有很多复杂的其他条件，即便”看上去“会走索引但是最终通过执行计划看却走了全表扫描。</li></ul><h5 id="组合一：id列是主键，RC隔离级别，执行delete-from-t1-where-id-x3D"><a href="#组合一：id列是主键，RC隔离级别，执行delete-from-t1-where-id-x3D" class="headerlink" title="组合一：id列是主键，RC隔离级别，执行delete from t1 where id &#x3D;"></a>组合一：id列是主键，RC隔离级别，执行delete from t1 where id &#x3D;</h5><p>10;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，<br><span class="hljs-keyword">primary key</span>(id)<br>);<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：如果id列是主键，这种情况只需要在id&#x3D;10的列上加上X锁。</p><h5 id="组合二：id是Unique-key-RC隔离级别，执行delete-from-t1-where-id-x3D-10"><a href="#组合二：id是Unique-key-RC隔离级别，执行delete-from-t1-where-id-x3D-10" class="headerlink" title="组合二：id是Unique_key , RC隔离级别，执行delete from t1 where id&#x3D;10;"></a>组合二：id是Unique_key , RC隔离级别，执行delete from t1 where id&#x3D;10;</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br><span class="hljs-keyword">unique</span> key `key_name`(`<span class="hljs-type">name</span>`)<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804130343440" alt="这里写图片描述"><br>这种组合下面id是二阶段索引，这种情况下和组合一加锁不同，DB引擎先走where条件的Id索引，在对应Id索引上id&#x3D;10的记录上加X锁，然后根据name值回到聚簇索引上面，并对name&#x3D;d的值加X锁。为什么聚簇索引上面也需要加X锁，如果不加X锁在delete执行的同事如果一个update t1 set id&#x3D;100 where name&#x3D;’d’;就会有冲突。<br><strong>结论</strong>：如果id是唯一索引，name为主键，那么会在id索引上面id&#x3D;10的记录上加X锁，并且name聚簇索引上name&#x3D;’d’的记录上加X锁。</p><h5 id="组合三：id为非唯一索引，RC隔离级别delete-from-t1-where-id-x3D-10"><a href="#组合三：id为非唯一索引，RC隔离级别delete-from-t1-where-id-x3D-10" class="headerlink" title="组合三：id为非唯一索引，RC隔离级别delete from t1 where id&#x3D;10;"></a>组合三：id为非唯一索引，RC隔离级别delete from t1 where id&#x3D;10;</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br>key `key_name`(`<span class="hljs-type">name</span>`)<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804130330558" alt="这里写图片描述"><br>从图可知，在where条件匹配到的id&#x3D;10的所有记录均会加上X锁，并且对应到索引上的记录也都会加锁。<br><strong>结论</strong>：若id列上有非唯一索引，那么对应的所有满足SQL查询条件的记录，都会被加锁。同时，这些记录在主键索引上的记录，也会被加锁。</p><h5 id="组合四：id列上无索引，RC隔离级别delete-from-t1-where-id-x3D-10"><a href="#组合四：id列上无索引，RC隔离级别delete-from-t1-where-id-x3D-10" class="headerlink" title="组合四：id列上无索引，RC隔离级别delete from t1 where id&#x3D;10;"></a>组合四：id列上无索引，RC隔离级别delete from t1 where id&#x3D;10;</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804130311363" alt="这里写图片描述"><br><strong>结论</strong>：mysql在走where条件的时候由于无法快速通过索引确认影响行，因此会对所有聚簇索引的记录行加上X锁然后返回所有记录。在具体实现时Mysql做了优化，再次通过where条件判断，对于不满足的记录通过unlock_row将X锁进行释放(违背了2PL规范);</p><h5 id="组合五：id为主键列，RR隔离级别"><a href="#组合五：id为主键列，RR隔离级别" class="headerlink" title="组合五：id为主键列，RR隔离级别"></a>组合五：id为主键列，RR隔离级别</h5><p><strong>这种情况下加锁机制同组合一一致。</strong></p><h5 id="组合六：id列为唯一索引，RR隔离级别"><a href="#组合六：id列为唯一索引，RR隔离级别" class="headerlink" title="组合六：id列为唯一索引，RR隔离级别"></a>组合六：id列为唯一索引，RR隔离级别</h5><p><strong>这种情况下加锁同组合二一致</strong></p><h5 id="组合七：id列为非唯一索引，RR隔离级别-（GAP锁）"><a href="#组合七：id列为非唯一索引，RR隔离级别-（GAP锁）" class="headerlink" title="组合七：id列为非唯一索引，RR隔离级别 （GAP锁）"></a>组合七：id列为非唯一索引，RR隔离级别 （GAP锁）</h5><p>由于Mysql事务离别为RC的情况下是允许幻读的，但是隔离级别在RR的情况下是不运行幻读。Mysql是如何做到RR隔离级别不产生幻读？这个组合中会加以说明。<br>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804132704791" alt="这里写图片描述"><br>这里的加锁机制和RC下面的加锁机制相似，唯一区别的是就是RC的加锁情况下增加了一个GAP锁,并且GAP锁不是加到具体的记录上的，而是加载到记录与记录之间的一把锁。<br>先说说幻读：幻读的意思是说当连续两次执行一个select * from t1 where id&#x3D;10 for update Sql的时候，前后两次读取的记录数不一致（第二次不会返回比第一次更多的记录数）。<br>RR隔离级别下，由于B+树索引是有序的，那么需要保证的是在id&#x3D;[6,10)之间不能插入id&#x3D;10的记录，详细就是在[6,c]与[10,b]之间插入类似[10,aa]或者在[10,b]与[10,d]之间插入[10,c]时都需要有一把锁来使得这些插入不能执行（即：GAP锁）。</p><p>GAP锁之所以在组合五和组合六中不会出现的原因是因为上面两种组合保证了记录的唯一性，也就没有必要使用GAP锁。</p><p><strong>结论</strong>：Repeatable Read隔离级别下，id列上有一个非唯一索引，对应SQL：delete from t1 where id &#x3D; 10; 首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，加GAP上的GAP锁，然后加主键聚簇索引上的记录X锁，然后返回；然后读取下一条，重复进行。直至进行到第一条不满足条件的记录[11,f]，此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。</p><h5 id="组合八：id上无索引，RR事务隔离级别"><a href="#组合八：id上无索引，RR事务隔离级别" class="headerlink" title="组合八：id上无索引，RR事务隔离级别"></a>组合八：id上无索引，RR事务隔离级别</h5><p>加锁情况(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804134326035" alt="这里写图片描述"><br><strong>结论</strong>：加锁机制和RC隔离级别下类似，区别是同事为每个记录之间增加了一个GAP锁。任何更新&#x2F;修改&#x2F;插入等涉及到加锁的Sql语句都无法执行。欣喜的是同组合四类似，Mysql会提前过滤where条件为不满足条件的提前释放锁。</p><h5 id="组合九：Serializable"><a href="#组合九：Serializable" class="headerlink" title="组合九：Serializable"></a>组合九：Serializable</h5><p>Serializable情况下，delete from t1 where id&#x3D;10 通RR情况下一样会通过Gap锁解决掉幻读情况。Serializable影响的是在select * from t1 where id&#x3D;10 ,这条Sql在RR 和 RC下面都是快照度不加锁，但是在Serializable情况下会加锁。</p><h4 id="一条复杂Sql的分析"><a href="#一条复杂Sql的分析" class="headerlink" title="一条复杂Sql的分析"></a>一条复杂Sql的分析</h4><p>Sql用例如下(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804135959531" alt="这里写图片描述"></p><p>在分析出SQL where条件的构成之后，再来看看这条SQL的加锁情况 (RR隔离级别)，如下图所示：<br><img src="https://img-blog.csdn.net/20150804140412382" alt="这里写图片描述"><br>从图中可以看出，在Repeatable Read隔离级别下，由Index Key所确定的范围，被加上了GAP锁；Index Filter锁给定的条件 (userid &#x3D; ‘hdc’)何时过滤，视MySQL的版本而定，在MySQL 5.6版本之前，不支持Index Condition Pushdown(ICP)，因此Index Filter在MySQL Server层过滤，在5.6后支持了Index Condition Pushdown，则在index上过滤。若不支持ICP，不满足Index Filter的记录，也需要加上记录X锁，若支持ICP，则不满足Index Filter的记录，无需加记录X锁 (图中，用红色箭头标出的X锁，是否要加，视是否支持ICP而定)；而Table Filter对应的过滤条件，则在聚簇索引中读取后，在MySQL Server层面过滤，因此聚簇索引上也需要X锁。最后，选取出了一条满足条件的记录[8,hdc,d,5,good]，但是加锁的数量，要远远大于满足条件的记录数量。</p><p><strong>结论</strong>：在Repeatable Read隔离级别下，针对一个复杂的SQL，首先需要提取其where条件。Index Key确定的范围，需要加上GAP锁；Index Filter过滤条件，视MySQL版本是否支持ICP，若支持ICP，则不满足Index Filter的记录，不加X锁，否则需要X锁；Table Filter过滤条件，无论是否满足，都需要加X锁。</p><h4 id="死锁的原理和分析"><a href="#死锁的原理和分析" class="headerlink" title="死锁的原理和分析"></a>死锁的原理和分析</h4><p>死锁的情况1(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804140841923" alt="这里写图片描述"><br>死锁情况2(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150825001409900" alt="这里写图片描述"><br>上面的两个死锁用例。第一个非常好理解，也是最常见的死锁，每个事务执行两条SQL，分别持有了一把锁，然后加另一把锁，产生死锁。</p><p>第二个用例，虽然每个Session都只有一条语句，仍旧会产生死锁。要分析这个死锁，首先必须用到本文前面提到的MySQL加锁的规则。针对Session 1，从name索引出发，读到的[hdc, 1]，[hdc, 6]均满足条件，不仅会加name索引上的记录X锁，而且会加聚簇索引上的记录X锁，加锁顺序为先[1,hdc,100]，后[6,hdc,10]。而Session 2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。发现没有，跟Session 1的加锁顺序正好相反，如果两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。</p><p>#参见文档<br><a href="http://hedengcheng.com/?p=771">何登成文章：http://hedengcheng.com/?p=771</a><br><a href="http://dev.mysql.com/doc/">mysql文档：http://dev.mysql.com/doc/</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux远程文件传输命令</title>
    <link href="/2023/02/12/linux%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/02/12/linux%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-copy-file-to-local-system"><a href="#How-to-copy-file-to-local-system" class="headerlink" title="How to copy file to local system?"></a>How to copy file to local system?</h1><p>##Use nc(NetCat) Command （Not Security）<br><strong>Server side</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cat backup.iso <span class="hljs-string">| pv -b &gt; nc -l 3333</span><br></code></pre></td></tr></table></figure><p><strong>Client side</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">192.168.0.1</span> <span class="hljs-number">3333</span> | pv -b &gt; backunp.iso<br></code></pre></td></tr></table></figure><p><strong>ps: nc also can use for port scanning</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">#It may <span class="hljs-keyword">be</span> useful <span class="hljs-keyword">to</span> know which ports are <span class="hljs-keyword">open</span> <span class="hljs-built_in">and</span> running services <span class="hljs-keyword">on</span> <span class="hljs-keyword">a</span> target machine. the -<span class="hljs-keyword">z</span> flag can <span class="hljs-keyword">be</span> used <span class="hljs-keyword">to</span> tell nc <span class="hljs-keyword">to</span> report <span class="hljs-keyword">open</span> ports,ranther than initiate <span class="hljs-keyword">a</span> connection.<br><br>nc -zv host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">80</span> <span class="hljs-number">20</span> <span class="hljs-number">22</span><br><br>&gt;nc: connect <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">80</span> (tcp) failed: Connection refused<br>&gt;nc: connect <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">20</span> (tcp) failed: Connection refused<br>&gt;Connection <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> port [tcp/ssh] succeeded!<br><br>#nc also <span class="hljs-keyword">be</span> useful <span class="hljs-keyword">to</span> know which server software <span class="hljs-keyword">is</span> running<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;QUIT&#x27;</span> | nc host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">20</span>-<span class="hljs-number">30</span><br><br>&gt;SSH-<span class="hljs-number">1.99</span>-OpenSSH_3.<span class="hljs-number">6.1</span>p2 Protocol mismatch.<br>&gt;<span class="hljs-number">220</span> host.example.<span class="hljs-keyword">com</span> IMS SMTP Receiver Version <span class="hljs-number">0.84</span> Ready<br><br></code></pre></td></tr></table></figure><h2 id="Use-scp-Command"><a href="#Use-scp-Command" class="headerlink" title="Use scp Command"></a>Use scp Command</h2><p><strong>Copy your file to target marchine</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">scp <span class="hljs-keyword">file</span>.foo user@<span class="hljs-keyword">target</span>.com:<span class="hljs-keyword">file</span>.foo<br></code></pre></td></tr></table></figure><p><strong>Copy target marchine’s file to local</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">scp user@<span class="hljs-keyword">target</span>.com:<span class="hljs-keyword">file</span>.foo <span class="hljs-keyword">file</span>.foo<br></code></pre></td></tr></table></figure><h2 id="Use-ssh-Command"><a href="#Use-ssh-Command" class="headerlink" title="Use ssh Command"></a>Use ssh Command</h2><p><strong>To remote host</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> localfile.<span class="hljs-keyword">conf</span> | ssh user@hostname &#x27;<span class="hljs-keyword">cat</span> -&gt; /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span>&#x27;<br></code></pre></td></tr></table></figure><p><strong>From remote host</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">ssh user@hostname &#x27;<span class="hljs-keyword">cat</span> /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span>&#x27; &gt; /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><h2 id="Use-sftp-Command"><a href="#Use-sftp-Command" class="headerlink" title="Use sftp Command"></a>Use sftp Command</h2><p><strong>same as ftp command</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sftp</span> username<span class="hljs-variable">@remote_hostname_or_IP</span><br></code></pre></td></tr></table></figure><h2 id="Use-sshsf-Mount-Remote-File-System-Over-SSH"><a href="#Use-sshsf-Mount-Remote-File-System-Over-SSH" class="headerlink" title="Use sshsf Mount Remote File System Over SSH"></a>Use sshsf Mount Remote File System Over SSH</h2><p><code>scp sftp nc allow us to copy files easily and securely between these accounts, But, what if we don&#39;t want to copy the files to our local system before using them? Normally, this would be a good place for traditional network filesystem, Unfortunately, setting up these network filesystems requires administrator access on both systems. Luckily, as long as you have SSH access, you can use SSHFS to mount and use remote directory trees as if they were local.</code><br><strong>Install sshfs</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install sshfs<br></code></pre></td></tr></table></figure><p><strong>Mounting the remote file system</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HOME</span><br>sudo mkdir <span class="hljs-regexp">/mnt/</span>droplte &lt; -- replace <span class="hljs-string">&#x27;droplet&#x27;</span> whatever you prefer<br>sudo sshfs -o allow_other, defer_permissions root@remotehost:<span class="hljs-regexp">/ /m</span>nt/droplet<br></code></pre></td></tr></table></figure><p><strong>Unmounting the remote file system</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo umount <span class="hljs-regexp">/mnt/</span>droplet<br></code></pre></td></tr></table></figure><p><strong>Permanently mounting the remote file system</strong><br><code>This would set a mount point that would persist through restart of both your local machine and droplets</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo nano <span class="hljs-regexp">/etc/</span>fstab &lt;-- edit the <span class="hljs-regexp">/etc/</span>fstab <span class="hljs-keyword">file</span> with a text editor<br>sshfs#root@remotehost:<span class="hljs-regexp">/ /m</span>nt/droplet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序-归档</title>
    <link href="/2023/02/12/%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95-%E5%BD%92%E6%A1%A3/"/>
    <url>/2023/02/12/%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95-%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡算法</span><br><span class="hljs-comment"> * Created by xueping.you on 15-8-5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">static</span> Logger logger = LoggerFactory.<span class="hljs-title function_ invoke__">getLogger</span>(BubbleSort.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-keyword">int</span> [] unsortArray)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;unsortArray.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;unsortArray.length-i-<span class="hljs-number">1</span>; j++)&#123;<br>                <span class="hljs-keyword">int</span> temp = unsortArray[j];<br>                <span class="hljs-keyword">if</span>(unsortArray[j]&gt;unsortArray[j+<span class="hljs-number">1</span>])&#123;<br>                    unsortArray[j] = unsortArray[j+<span class="hljs-number">1</span>];<br>                    unsortArray[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">main</span>(String []args)&#123;<br>        <span class="hljs-keyword">int</span> [] <span class="hljs-keyword">array</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">31</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        logger.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;before:&#123;&#125;&quot;</span> , <span class="hljs-keyword">array</span>);<br>        <span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-keyword">array</span>);<br>        logger.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;after:&#123;&#125;&quot;</span>, <span class="hljs-keyword">array</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>result:<br>19:26:20.928 [main] INFO  com.qyou.data.arithmetic.BubbleSort - before:[12, 10, 2, 45, 31, 56, 1, 9]<br>19:26:20.938 [main] INFO  com.qyou.data.arithmetic.BubbleSort - after:[1, 2, 9, 10, 12, 31, 45, 56]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch简单使用</title>
    <link href="/2023/02/12/ElasticSearch%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/12/ElasticSearch%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="What-is-ElasticSearch-？"><a href="#What-is-ElasticSearch-？" class="headerlink" title="What is ElasticSearch ？"></a>What is ElasticSearch ？</h3><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><p>但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><p>不过，Elasticsearch不仅仅是Lucene和全文搜索，我们还能这样去描述它：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><p>而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。</p><p>上手Elasticsearch非常容易。它提供了许多合理的缺省值，并对初学者隐藏了复杂的搜索引擎理论。它开箱即用（安装即可使用），只需很少的学习既可在生产环境中使用。</p><p>Elasticsearch在Apache 2 license下许可使用，可以免费下载、使用和修改。</p><p>随着你对Elasticsearch的理解加深，你可以根据不同的问题领域定制Elasticsearch的高级特性，这一切都是可配置的，并且配置非常灵活。</p><h3 id="Config-elasticSearch-properties"><a href="#Config-elasticSearch-properties" class="headerlink" title="Config elasticSearch.properties"></a>Config elasticSearch.properties</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#配置elasticsearch index</span><br><span class="hljs-attr">csg_bill_index_name</span>=hsc_test_index<br><span class="hljs-comment">#配置elasticsearch type</span><br><span class="hljs-attr">csg_bill_type_name</span>=billdetails<br><span class="hljs-comment">#配置elasticsearch es address </span><br><span class="hljs-attr">csg_bill_es_address</span>=l-test.h.beta.cn0:<span class="hljs-number">9300</span><br><span class="hljs-comment">#配置elasticsearch cluster</span><br><span class="hljs-attr">csg_bill_es_cluster</span>=elasticsearch_f<br></code></pre></td></tr></table></figure><h3 id="Create-elasticSearch-TransportSessionFactory"><a href="#Create-elasticSearch-TransportSessionFactory" class="headerlink" title="Create elasticSearch TransportSessionFactory"></a>Create elasticSearch TransportSessionFactory</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-30.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ESTransportSessionFactory</span>  &#123;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-keyword">static</span> <span class="hljs-title class_">Logger</span> <span class="hljs-variable constant_">LOGGER</span> = <span class="hljs-title class_">LoggerFactory</span>.<span class="hljs-title function_">getLogger</span>(<span class="hljs-title class_">ESTransportSessionFactory</span>.<span class="hljs-property">class</span>);<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;csg_bill_es_address&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> elasticAddress;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;csg_bill_es_cluster&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> elasticCluster;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">TransportClient</span> transportClient;<br><br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">checkArgument</span>(!<span class="hljs-title class_">Strings</span>.<span class="hljs-title function_">isEmpty</span>(elasticCluster) ,<br>         <span class="hljs-string">&quot;ElasticSearch Cluster Name Null or EmptyString&quot;</span>);<br>        <span class="hljs-title class_">TransportAddress</span>[] transportAddresses = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; addressList = <br>        <span class="hljs-title class_">Lists</span>.<span class="hljs-title function_">newArrayList</span>(<br>                <span class="hljs-title class_">Splitter</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;,&quot;</span>).<span class="hljs-title function_">trimResults</span>().<span class="hljs-title function_">omitEmptyStrings</span>().<span class="hljs-title function_">split</span>(elasticAddress)<br>        );<br>        <span class="hljs-title function_">checkArgument</span>(!<span class="hljs-title class_">CollectionUtils</span>.<span class="hljs-title function_">isEmpty</span>(addressList) ,<br>         <span class="hljs-string">&quot;ElasticSearch Cluster Address Can&#x27;t be Empty&quot;</span>);<br>        transportAddresses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>[addressList.<span class="hljs-title function_">size</span>()];<br>        <span class="hljs-title class_">Splitter</span> splitter = <span class="hljs-title class_">Splitter</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;:&quot;</span>).<span class="hljs-title function_">omitEmptyStrings</span>().<span class="hljs-title function_">trimResults</span>();<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;addressList.<span class="hljs-title function_">size</span>() ; i++)&#123;<br>            <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; singleAddressPair = <br>            <span class="hljs-title class_">Lists</span>.<span class="hljs-title function_">newArrayList</span>(splitter.<span class="hljs-title function_">split</span>(addressList.<span class="hljs-title function_">get</span>(i)));<br>            <span class="hljs-title function_">checkArgument</span>(singleAddressPair.<span class="hljs-title function_">size</span>()==<span class="hljs-number">2</span> ,<br>                    <span class="hljs-string">&quot;ElasticSearch Address format address:port error&quot;</span> + addressList.<span class="hljs-title function_">get</span>(i)<br>            );<br>            transportAddresses[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketTransportAddress</span>(<br>                    singleAddressPair.<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>),<br>                    <span class="hljs-title class_">Integer</span>.<span class="hljs-built_in">parseInt</span>(singleAddressPair.<span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>))<br>            );<br>        &#125;<br>        <span class="hljs-title class_">Settings</span> settings = <span class="hljs-title class_">ImmutableSettings</span>.<span class="hljs-title function_">builder</span>()<br>        .<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;cluster.name&quot;</span> , elasticCluster)<br>        .<span class="hljs-title function_">build</span>();<br>        transportClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportClient</span>(settings);<br>        transportClient.<span class="hljs-title function_">addTransportAddresses</span>(transportAddresses);<br><br>        <span class="hljs-variable constant_">LOGGER</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;ElasticSearch Init Done ElasticAddress=&#123;&#125; , ElasticClusterName=&#123;&#125;&quot;</span> <br>        , elasticAddress , elasticCluster);<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (transportClient != <span class="hljs-literal">null</span>) &#123;<br>            transportClient.<span class="hljs-title function_">close</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">TransportClient</span> <span class="hljs-title function_">getTransportClient</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> transportClient;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service-Method-Interface"><a href="#Service-Method-Interface" class="headerlink" title="Service Method Interface"></a>Service Method Interface</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-30.</span><br><span class="hljs-comment"> */</span><br>@Service<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESBillDetailServiceBase</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">static</span> Logger LOGGER = LoggerFactory.<span class="hljs-title function_ invoke__">getLogger</span>(ESBillDetailServiceBase.<span class="hljs-keyword">class</span>);<br><br>    @Resource<br>    <span class="hljs-keyword">private</span> ESTransportSessionFactory esTransportSessionFactory;<br><br>    @<span class="hljs-title function_ invoke__">Value</span>(<span class="hljs-string">&quot;$&#123;csg_bill_index_name&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> String ES_INDEX;<br><br>    @<span class="hljs-title function_ invoke__">Value</span>(<span class="hljs-string">&quot;$&#123;csg_bill_type_name&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> String ES_TYPE;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> ObjectMapper objectMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-built_in">static</span> &#123;<br>        objectMapper.<span class="hljs-title function_ invoke__">setDateFormat</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Method1 将订单号 , 对账单号 , 产品Id , 账单号 ,结算供应商ID,结算对象Id,create_ts进行索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> esBillDetails</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">insertAllOnDuplicateIdCover</span>(List&lt;ESBillDetail&gt; esBillDetails)&#123;<br>        Stopwatch stopwatch = Stopwatch.<span class="hljs-title function_ invoke__">createStarted</span>();<br>        <span class="hljs-keyword">if</span>(CollectionUtils.<span class="hljs-title function_ invoke__">isEmpty</span>(esBillDetails))&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        TransportClient client = esTransportSessionFactory.<span class="hljs-title function_ invoke__">getTransportClient</span>();<br>        BulkRequestBuilder bulkRequestBuilder = client.<span class="hljs-title function_ invoke__">prepareBulk</span>();<br><br>        <span class="hljs-keyword">for</span>(ESBillDetail esBillDetail : esBillDetails)&#123;<br>            String source;<br>            <span class="hljs-keyword">try</span> &#123;<br>                source = objectMapper.<span class="hljs-title function_ invoke__">writeValueAsString</span>(esBillDetail);<br>            &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e1) &#123;<br>                LOGGER.<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;create billDetail index error source : &quot;</span> + esBillDetail, e1);<br>                QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DETAIL_INDEXING_ERROR);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            IndexRequestBuilder indexRequestBuilder = <br>            client.<span class="hljs-title function_ invoke__">prepareIndex</span>(ES_INDEX, ES_TYPE, <br>            esBillDetail.<span class="hljs-title function_ invoke__">getId</span>()).<span class="hljs-title function_ invoke__">setSource</span>(source);<br>            bulkRequestBuilder.<span class="hljs-title function_ invoke__">add</span>(indexRequestBuilder);<br>        &#125;<br><br>        BulkResponse bulkResponse = bulkRequestBuilder.<span class="hljs-title function_ invoke__">execute</span>().<span class="hljs-title function_ invoke__">actionGet</span>();<br>        <span class="hljs-keyword">if</span>(bulkResponse.<span class="hljs-title function_ invoke__">hasFailures</span>())&#123;<br>            <span class="hljs-built_in">Iterator</span>&lt;BulkItemResponse&gt; itemResponseIterator = bulkResponse.<span class="hljs-title function_ invoke__">iterator</span>();<br>            <span class="hljs-keyword">while</span>(itemResponseIterator.<span class="hljs-title function_ invoke__">hasNext</span>())&#123;<br>                BulkItemResponse itemResponse = itemResponseIterator.<span class="hljs-title function_ invoke__">next</span>();<br>                <span class="hljs-keyword">if</span>(itemResponse!=<span class="hljs-literal">null</span> &amp;&amp; itemResponse.<span class="hljs-title function_ invoke__">isFailed</span>())&#123;<br>                    LOGGER.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;indexing billDetail error indexMessage=&#123;&#125;,</span><br><span class="hljs-string">                    errorMassage=&#123;&#125;&quot;</span>,Joiner.<span class="hljs-title function_ invoke__">on</span>(<span class="hljs-string">&#x27;,&#x27;</span>)                .<span class="hljs-title function_ invoke__">join</span>(itemResponse.<span class="hljs-title function_ invoke__">getIndex</span>(),itemResponse.<span class="hljs-title function_ invoke__">getType</span>(),itemResponse.<span class="hljs-title function_ invoke__">getId</span>()),<br>                            JsonUtils.<span class="hljs-title function_ invoke__">toJSONString</span>(itemResponse));<br>                &#125;<br>            &#125;<br>            QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DETAIL_INDEXING_ERROR);<br>        &#125;<br><br>        QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DETAIL_INDEXING_DONE , stopwatch.<span class="hljs-title function_ invoke__">elapsed</span>(TimeUnit.MILLISECONDS));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Method2 通过订单号 ，对账单号, 产品Id , 账单号 的任意条件进行查询，支持分页</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;ESBillDetail&gt; <span class="hljs-title function_ invoke__">query</span>(ESBillDetailQuery esBillDetailQuery , Pagination pagination)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Stopwatch stopwatch = Stopwatch.<span class="hljs-title function_ invoke__">createStarted</span>();<br>            List&lt;ESBillDetail&gt; esBillDetails = Lists.<span class="hljs-title function_ invoke__">newArrayList</span>();<br>            BoolQueryBuilder boolQueryBuilder = QueryBuilders.<span class="hljs-title function_ invoke__">boolQuery</span>();<br>            <span class="hljs-keyword">for</span>(Map.Entry entry : esBillDetailQuery.<span class="hljs-title function_ invoke__">entrySet</span>())&#123;<br>                ESBillDetailQuery.Param param = (ESBillDetailQuery.Param)entry.<span class="hljs-title function_ invoke__">getKey</span>();<br>                param.<span class="hljs-title function_ invoke__">decorateBoolQueryBuilder</span>(entry.<span class="hljs-title function_ invoke__">getValue</span>(),boolQueryBuilder);<br>            &#125;<br>            SearchRequestBuilder requestBuilder = esTransportSessionFactory.<span class="hljs-title function_ invoke__">getTransportClient</span>()<br>                    .<span class="hljs-title function_ invoke__">prepareSearch</span>(ES_INDEX)<br>                    .<span class="hljs-title function_ invoke__">setTypes</span>(ES_TYPE)<br>                    .<span class="hljs-title function_ invoke__">setSearchType</span>(SearchType.DFS_QUERY_THEN_FETCH)<br>                    .<span class="hljs-title function_ invoke__">setQuery</span>(boolQueryBuilder);<br>            <span class="hljs-keyword">if</span>(pagination!=<span class="hljs-literal">null</span>)&#123;<br>                    requestBuilder.<span class="hljs-title function_ invoke__">setFrom</span>(pagination.<span class="hljs-title function_ invoke__">getStartIndex</span>())<br>                            .<span class="hljs-title function_ invoke__">setSize</span>(pagination.<span class="hljs-title function_ invoke__">getPageSize</span>());<br>            &#125;<br>            SearchResponse searchResponse = requestBuilder.<span class="hljs-title function_ invoke__">execute</span>().<span class="hljs-title function_ invoke__">actionGet</span>();<br>            SearchHits searchHits = searchResponse.<span class="hljs-title function_ invoke__">getHits</span>();<br>            <span class="hljs-keyword">for</span>(SearchHit searchHit : searchHits)&#123;<br>                Map&lt;String , Object&gt; map = searchHit.<span class="hljs-title function_ invoke__">getSource</span>();<br>                ESBillDetail esBillDetail = objectMapper.<span class="hljs-title function_ invoke__">readValue</span>(<br>                        JsonUtils.<span class="hljs-title function_ invoke__">toJSONString</span>(map) ,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;ESBillDetail&gt;() &#123;&#125;);<br>                esBillDetails.<span class="hljs-title function_ invoke__">add</span>(esBillDetail);<br>            &#125;<br>            LOGGER.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;Query ESDetail done query=&#123;&#125; , time=&#123;&#125;&quot;</span> , esBillDetailQuery , stopwatch.<span class="hljs-title function_ invoke__">elapsed</span>(TimeUnit.MILLISECONDS));<br>            QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_QUERY , stopwatch.<span class="hljs-title function_ invoke__">elapsed</span>(TimeUnit.MILLISECONDS));<br>            <span class="hljs-keyword">return</span> esBillDetails;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e)&#123;<br>            LOGGER.<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;elastic search query Error query=&#123;&#125; , page=&#123;&#125;&quot;</span> , esBillDetailQuery , pagination , e);<br>            QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DETAIL_QUERY_ERROR);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;ES 查询异常&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此方法慎用！！！！！！！！！！！！！！！！！！！</span><br><span class="hljs-comment">     * Method3 通过匹配条件删除ES 中的记录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title function_ invoke__">delete</span>(ESBillDetailQuery esBillDetailQuery)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Stopwatch stopwatch = Stopwatch.<span class="hljs-title function_ invoke__">createStarted</span>();<br>            BoolQueryBuilder boolQueryBuilder = QueryBuilders.<span class="hljs-title function_ invoke__">boolQuery</span>();<br>            <span class="hljs-keyword">for</span>(Map.Entry entry : esBillDetailQuery.<span class="hljs-title function_ invoke__">entrySet</span>())&#123;<br>                ESBillDetailQuery.Param param = (ESBillDetailQuery.Param)entry.<span class="hljs-title function_ invoke__">getKey</span>();<br>                param.<span class="hljs-title function_ invoke__">decorateBoolQueryBuilder</span>(entry.<span class="hljs-title function_ invoke__">getValue</span>(),boolQueryBuilder);<br>            &#125;<br>            DeleteByQueryResponse deleteByQueryResponse = esTransportSessionFactory.<span class="hljs-title function_ invoke__">getTransportClient</span>()<br>                    .<span class="hljs-title function_ invoke__">prepareDeleteByQuery</span>(ES_INDEX )<br>                    .<span class="hljs-title function_ invoke__">setTypes</span>(ES_TYPE)<br>                    .<span class="hljs-title function_ invoke__">setQuery</span>(boolQueryBuilder).<span class="hljs-title function_ invoke__">execute</span>().<span class="hljs-title function_ invoke__">actionGet</span>();<br>            LOGGER.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;Delete ESDetail done query=&#123;&#125; , time=&#123;&#125;&quot;</span> , esBillDetailQuery , stopwatch.<span class="hljs-title function_ invoke__">elapsed</span>(TimeUnit.MILLISECONDS));<br>            QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DELETE , stopwatch.<span class="hljs-title function_ invoke__">elapsed</span>(TimeUnit.MILLISECONDS));<br>            <span class="hljs-keyword">return</span> deleteByQueryResponse.<span class="hljs-title function_ invoke__">status</span>().<span class="hljs-title function_ invoke__">equals</span>(RestStatus.OK) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e)&#123;<br>            LOGGER.<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;elastic search delete Error query=&#123;&#125; , page=&#123;&#125;&quot;</span> , esBillDetailQuery , e);<br>            QMonitor.<span class="hljs-title function_ invoke__">recordOne</span>(QMonitorConstants.ES_BILL_DETAIL_QUERY_ERROR);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;ES 删除记录异常&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="ESBillDetailQuery"><a href="#ESBillDetailQuery" class="headerlink" title="ESBillDetailQuery"></a>ESBillDetailQuery</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-30.</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> ESBillDetailQuery extends GenericQuery&lt;ESBillDetailQuery.Param&gt; &#123;<br><br>    <span class="hljs-comment">//全为Str类型</span><br>    public enum Param&#123;<br>        ids &#123;<br>            @Override<br>            public &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span>, Q <span class="hljs-params">queryBuilder</span>)</span> &#123;<br>                List&lt;String&gt; strsParam = (List&lt;String&gt;)param;<br>                BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder)queryBuilder;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">strsParam</span>)</span>)&#123;<br>                    return;<br>                &#125;<br>                BoolQueryBuilder subCodeQuery = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>                <span class="hljs-keyword">for</span>(String strParam : strsParam)&#123;<br>                    subCodeQuery.should(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">Query(<span class="hljs-string">&quot;billNo&quot;</span> , <span class="hljs-params">strParam</span>)</span>.operator(MatchQueryBuilder.Operator.AND));<br>                &#125;<br>                boolQueryBuilder.must(subCodeQuery);<br>            &#125;<br>        &#125;,<br>        billNos &#123;<br>            @Override<br>            public &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span>, Q <span class="hljs-params">queryBuilder</span>)</span> &#123;<br>                List&lt;String&gt; strsParam = (List&lt;String&gt;)param;<br>                BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder)queryBuilder;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">strsParam</span>)</span>)&#123;<br>                    return;<br>                &#125;<br>                BoolQueryBuilder subCodeQuery = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>                <span class="hljs-keyword">for</span>(String strParam : strsParam)&#123;<br>                    subCodeQuery.should(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">Query(<span class="hljs-string">&quot;billNo&quot;</span> , <span class="hljs-params">strParam</span>)</span>.operator(MatchQueryBuilder.Operator.AND));<br>                &#125;<br>                boolQueryBuilder.must(subCodeQuery);<br>            &#125;<br>        &#125;,<br>        orderNos &#123;<br>            @Override<br>            public &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span>, Q <span class="hljs-params">queryBuilder</span>)</span> &#123;<br>                List&lt;String&gt; strsParam = (List&lt;String&gt;)param;<br>                BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder)queryBuilder;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">strsParam</span>)</span>)&#123;<br>                    return;<br>                &#125;<br>                BoolQueryBuilder subCodeQuery = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>                <span class="hljs-keyword">for</span>(String strParam : strsParam)&#123;<br>                    subCodeQuery.should(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">Query(<span class="hljs-string">&quot;orderNo&quot;</span> , <span class="hljs-params">strParam</span>)</span>.operator(MatchQueryBuilder.Operator.AND));<br>                &#125;<br>                boolQueryBuilder.must(subCodeQuery);<br>            &#125;<br>        &#125;,<br>        productIds &#123;<br>            @Override<br>            public &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span>, Q <span class="hljs-params">queryBuilder</span>)</span> &#123;<br>                List&lt;String&gt; strsParam = (List&lt;String&gt;)param;<br>                BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder)queryBuilder;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">strsParam</span>)</span>)&#123;<br>                    return;<br>                &#125;<br>                BoolQueryBuilder subCodeQuery = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>                <span class="hljs-keyword">for</span>(String strParam : strsParam)&#123;<br>                    subCodeQuery.should(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">Query(<span class="hljs-string">&quot;productId&quot;</span> , <span class="hljs-params">strParam</span>)</span>.operator(MatchQueryBuilder.Operator.AND));<br>                &#125;<br>                boolQueryBuilder.must(subCodeQuery);<br>            &#125;<br>        &#125;,<br>        reconcileIds &#123;<br>            @Override<br>            public &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span>, Q <span class="hljs-params">queryBuilder</span>)</span> &#123;<br>                List&lt;String&gt; strsParam = (List&lt;String&gt;)param;<br>                BoolQueryBuilder boolQueryBuilder = (BoolQueryBuilder)queryBuilder;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">strsParam</span>)</span>)&#123;<br>                    return;<br>                &#125;<br>                BoolQueryBuilder subCodeQuery = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>                <span class="hljs-keyword">for</span>(String strParam : strsParam)&#123;<br>                    subCodeQuery.should(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">Query(<span class="hljs-string">&quot;reconcileId&quot;</span> , <span class="hljs-params">strParam</span>)</span>.operator(MatchQueryBuilder.Operator.AND));<br>                &#125;<br>                boolQueryBuilder.must(subCodeQuery);<br>            &#125;<br>        &#125;;<br><br>        public abstract &lt;T, Q extends QueryBuilder&gt; void decorate<span class="hljs-constructor">BoolQueryBuilder(T <span class="hljs-params">param</span> ,  Q <span class="hljs-params">queryBuilder</span> )</span>;<br>    &#125;<br><br><br>    public <span class="hljs-constructor">ESBillDetailQuery()</span> &#123;<br>    &#125;<br><br>    public <span class="hljs-constructor">ESBillDetailQuery(Integer <span class="hljs-params">startIndex</span>, Integer <span class="hljs-params">maxCount</span>)</span> &#123;<br>        super(startIndex, maxCount);<br>    &#125;<br><br>    public <span class="hljs-constructor">ESBillDetailQuery(Class&lt;Param&gt; <span class="hljs-params">paramType</span>)</span> &#123;<br>        super(paramType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Mybatis Plugin插件实现分表路由规则</title>
    <link href="/2023/02/12/Java%20Mybatis%20Plugin%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%88%86%E8%A1%A8%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/"/>
    <url>/2023/02/12/Java%20Mybatis%20Plugin%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%88%86%E8%A1%A8%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-Plugin插件种类"><a href="#Mybatis-Plugin插件种类" class="headerlink" title="Mybatis Plugin插件种类"></a>Mybatis Plugin插件种类</h2><blockquote><p>mybatis支持对于<code>Executor</code>、<code>StatementHandler</code>、<code>PameterHandler</code>、<code>ResultSetHandler</code>做拦截。要想通过拦截器做分表路由可以在<code>Executor</code>或<code>StatementHandler</code>两个阶段进行拦截。本次的路由实现是在<code>StatementHandler</code>拦截Sql在通过Rule修改Sql的表名，这样系统原有的Sql不用修改表名会自动替换成路由计算出的表名。</p></blockquote><h3 id="定义mybatis-config-xml配置文件"><a href="#定义mybatis-config-xml配置文件" class="headerlink" title="定义mybatis-config.xml配置文件"></a>定义mybatis-config.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.*.settlement.provider.bill.prepay.dao.shard.BillShardDefault&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 必须以xxStrategy结尾 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStrategy&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.strategy.DefaultShardStrategy&quot;</span>/&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!--                  </span><br><span class="hljs-comment">            prepay_bill_detail_index|defaultStrategy,</span><br><span class="hljs-comment">            prepay_bill_detail_content,</span><br><span class="hljs-comment">            prepay_bill_sheet_fee</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 表名|路由策略 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 策略必须继承 com.strategy.ShardStrategy --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如果不指定Strategy则使用默认的策略 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 使用了路由策略表对应的Dao method 必须包含参数 </span><br><span class="hljs-comment">            @Param(&quot;_shardParam&quot;)@NotNull ShardParam shardParam</span><br><span class="hljs-comment">                参见： void insert(</span><br><span class="hljs-comment">                        @Param(&quot;detailIndex&quot;)PrepayBillDetailIndex billDetail,</span><br><span class="hljs-comment">                        @Param(&quot;_shardParam&quot;)@NotNull ShardParam shardParam);</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tableNames&quot;</span></span><br><span class="hljs-tag">                      <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">                      prepay_bill_detail_index|defaultStrategy,</span></span><br><span class="hljs-string"><span class="hljs-tag">                      prepay_bill_detail_content,</span></span><br><span class="hljs-string"><span class="hljs-tag">                      prepay_bill_sheet_fee&quot;</span></span><br><span class="hljs-tag">            /&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写自己的拦截器继承拦截器接口类Plugin"><a href="#编写自己的拦截器继承拦截器接口类Plugin" class="headerlink" title="编写自己的拦截器继承拦截器接口类Plugin"></a>编写自己的拦截器继承拦截器接口类Plugin</h3><h4 id="ShardStrategy-接口-amp-实现类-DefaultShardStrategy"><a href="#ShardStrategy-接口-amp-实现类-DefaultShardStrategy" class="headerlink" title="ShardStrategy 接口 &amp; 实现类 DefaultShardStrategy"></a>ShardStrategy 接口 &amp; 实现类 DefaultShardStrategy</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ShardStrategy 接口：<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shard分表策略</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-29.</span><br><span class="hljs-comment"> */</span><br>public interface ShardStrategy&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取表名</span><br><span class="hljs-comment">     * @param param</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>   String get<span class="hljs-constructor">TableName(String <span class="hljs-params">tableName</span> ,ShardParam <span class="hljs-params">param</span>)</span>;<br><br>&#125;<br><br><br>DefaultShardStragy 实现：<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-29.</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> DefaultShardStrategy extends ShardStrategy&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * @param tableName 例如：test</span><br><span class="hljs-comment">     * @param param1 例如：new ShardParam(new Date() , BizSystem.OTR)</span><br><span class="hljs-comment">     * @return 例如：test_201509</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    public String get<span class="hljs-constructor">TableName(String <span class="hljs-params">tableName</span> , ShardParam <span class="hljs-params">param1</span>)</span> &#123;<br>        StringBuilder builder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder(<span class="hljs-params">tableName</span>)</span>;<br>        builder.append(<span class="hljs-string">&quot;_&quot;</span>);<br>        builder.append(get<span class="hljs-constructor">AssShardParam(<span class="hljs-params">param1</span>)</span>);<br>        return builder.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    &#125;<br><br>    public static String get<span class="hljs-constructor">AssShardParam(ShardParam <span class="hljs-params">param1</span>)</span>&#123;<br>        StringBuilder builder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>        <span class="hljs-keyword">if</span>(param1.get<span class="hljs-constructor">BizSystem()</span>.equals(BizSystem.OTR))&#123;<br>            builder.append(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BizSystem</span>.</span><span class="hljs-module"><span class="hljs-identifier">OTR</span>.</span></span>name<span class="hljs-literal">()</span>);<br>        &#125;<br>        builder.append(param1.get<span class="hljs-constructor">DivideDate()</span>.get<span class="hljs-constructor">Year()</span> + <span class="hljs-number">1900</span> + <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">int</span> month = param1.get<span class="hljs-constructor">DivideDate()</span>.get<span class="hljs-constructor">Month()</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>( month &lt;<span class="hljs-number">10</span> )&#123;<br>            builder.append(<span class="hljs-string">&quot;0&quot;</span>+month);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            builder.append(month);<br>        &#125;<br>        return builder.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Interceptor实现"><a href="#Interceptor实现" class="headerlink" title="Interceptor实现"></a>Interceptor实现</h4><blockquote><p>可以通过Annotation <code>@Interceptor</code>申明拦截器属于四中拦截器里面的哪种，并且可以指定拦截的接口方法以及方法的参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by xueping.you on 15-7-29.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Intercepts(</span><br><span class="hljs-meta">&#123; @Signature(type = StatementHandler.class, </span><br><span class="hljs-meta"> method = &quot;prepare&quot;, </span><br><span class="hljs-meta"> args = &#123; Connection.class &#125;) </span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BillShardDefault</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(BillShardDefault.class);<br><br>    <span class="hljs-keyword">private</span> String tableName;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tableNames = Lists.newArrayList();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程安全类，初始化常量，避免重复创建</span><br><span class="hljs-comment">     * **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ObjectFactory</span> <span class="hljs-variable">DEFAULT_OBJECT_FACTORY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectFactory</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程安全类，初始化常量，避免重复创建</span><br><span class="hljs-comment">     * **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ObjectWrapperFactory</span> <span class="hljs-variable">DEFAULT_OBJECT_WRAPPER_FACTORY</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectWrapperFactory</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">BOUNDSQL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delegate.boundSql&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">BOUNDSQL_SQL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delegate.boundSql.sql&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SQL_PARAM_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delegate.parameterHandler.parameterObject&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ShardStrategy</span> <span class="hljs-variable">DEFAULTSTRATEGY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShardStrategy</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SHARDPARAM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_shardParam&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">STRATEGY_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Strategy&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String , ShardStrategy&gt; STRATEGY_CONTEXT = Maps.newHashMap();<br><br>    <span class="hljs-keyword">private</span> Map&lt;String , ShardStrategy&gt; TABLE_ROUTER = Maps.newHashMap();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> (StatementHandler)invocation.getTarget();<br>        <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> MetaObject.forObject(<br>        statementHandler , <br>        DEFAULT_OBJECT_FACTORY , <br>        DEFAULT_OBJECT_WRAPPER_FACTORY);<br>        <br>        <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> (BoundSql)metaObject.getValue(BOUNDSQL_NAME);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">executeSql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>        MapperMethod.<span class="hljs-type">ParamMap</span> <span class="hljs-variable">paramMap</span> <span class="hljs-operator">=</span> (MapperMethod.ParamMap)metaObject.getValue(SQL_PARAM_NAME);<br>        <span class="hljs-type">ShardParam</span> <span class="hljs-variable">shardParam</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (paramMap.containsKey(SHARDPARAM)) &#123;<br>            shardParam = (ShardParam)paramMap.get(SHARDPARAM);<br>        &#125;<br>        <span class="hljs-comment">/** 临时注释掉这段代码 数据迁移完成需要去掉 **/</span><br>       <span class="hljs-comment">//checkArgument(shardParam!=null , &quot;_shardParam Param Can&#x27;t Be Null&quot;);</span><br>        <span class="hljs-keyword">if</span>(shardParam!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">/** 临时if条件判断数据迁移完成需要去掉 **/</span><br>            executeSql = decorateSql(executeSql , shardParam);<br>            metaObject.setValue(BOUNDSQL_SQL_NAME,executeSql);<br>        &#125;<br>        <span class="hljs-keyword">return</span> invocation.proceed();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">decorateSql</span><span class="hljs-params">(String executeSql, ShardParam shardParam)</span> &#123;<br>        <span class="hljs-keyword">for</span>(String tableName : tableNames)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">newTaleName</span> <span class="hljs-operator">=</span> TABLE_ROUTER.get(tableName).getTableName(tableName , shardParam);<br>            executeSql = executeSql.replaceAll(tableName,newTaleName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> executeSql;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> StatementHandler) &#123;<br>            <span class="hljs-keyword">return</span> Plugin.wrap(target , <span class="hljs-built_in">this</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> target;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Don&#x27;t Modify Any Code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> properties</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        setShardStrategy(properties);<br>        setTableNames(properties);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTableNames</span><span class="hljs-params">(Properties properties)</span>&#123;<br>        tableName = properties.getProperty(<span class="hljs-string">&quot;tableNames&quot;</span>);<br>        checkArgument(!Strings.isEmpty(tableName) , <span class="hljs-string">&quot;参数[tableNames]必填!&quot;</span>);<br>        List&lt;String&gt; tempTableRouterStrList = Lists.newArrayList(<br>                Splitter.on(<span class="hljs-string">&quot;,&quot;</span>).trimResults().omitEmptyStrings().split(tableName)<br>        );<br>        <span class="hljs-keyword">for</span>(String tempTableRouterStr : tempTableRouterStrList)&#123;<br>            List&lt;String&gt; single = Lists.newArrayList(<br>                    Splitter.on(<span class="hljs-string">&quot;|&quot;</span>).omitEmptyStrings().trimResults().split(tempTableRouterStr)<br>            );<br>            checkArgument(!CollectionUtils.isEmpty(single) , <span class="hljs-string">&quot;Config is not correct!&quot;</span>);<br>            tableNames.add(single.get(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">if</span>(single.size()==<span class="hljs-number">1</span>)&#123;<br>                TABLE_ROUTER.put(single.get(<span class="hljs-number">0</span>), DEFAULTSTRATEGY);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                TABLE_ROUTER.put(single.get(<span class="hljs-number">0</span>), STRATEGY_CONTEXT.get(single.get(<span class="hljs-number">1</span>)));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setShardStrategy</span><span class="hljs-params">(Properties properties)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(Map.Entry entry : properties.entrySet())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">strategyClassNameKey</span> <span class="hljs-operator">=</span> entry.getKey().toString();<br>                <span class="hljs-keyword">if</span>(strategyClassNameKey.indexOf(STRATEGY_SUFFIX)!=-<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">strategyClassName</span> <span class="hljs-operator">=</span> entry.getValue().toString();<br>                    <span class="hljs-type">Class</span> <span class="hljs-variable">strategyClass</span> <span class="hljs-operator">=</span> Class.forName(strategyClassName);<br><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> strategyClass.newInstance();<br>                    <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> ShardStrategy)&#123;<br>                        STRATEGY_CONTEXT.put(strategyClassNameKey , (ShardStrategy)o);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>                        <span class="hljs-string">&quot;strategyClass must implement interface ShardStrategy&lt;P&gt;&quot;</span><br>                        );<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            logger.error(<span class="hljs-string">&quot;生成ShardStrategy策略失败&quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PS说说Mybatis-mybatis-config-xml文件的解析-amp-MybatisPlugin代码逻辑"><a href="#PS说说Mybatis-mybatis-config-xml文件的解析-amp-MybatisPlugin代码逻辑" class="headerlink" title="PS说说Mybatis mybatis-config.xml文件的解析&amp;MybatisPlugin代码逻辑"></a>PS说说Mybatis <code>mybatis-config.xml</code>文件的解析&amp;Mybatis<code>Plugin</code>代码逻辑</h3><h4 id="Mybatis通过-SqlSessionFactoryBuilder-构造-SqlSessionFactory"><a href="#Mybatis通过-SqlSessionFactoryBuilder-构造-SqlSessionFactory" class="headerlink" title="Mybatis通过 SqlSessionFactoryBuilder 构造 SqlSessionFactory"></a>Mybatis通过 SqlSessionFactoryBuilder 构造 SqlSessionFactory</h4><blockquote><p>在mybatis中存在一个<code>SqlSessionFactoryBuilder</code>类用于在实例起来时构造Session工厂实例。涉及到的最终方法:<code>public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123;....&#125;</code>该方法中会调用<code>XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);</code><br>      return build(parser.parse()); 去解析配置文件，里面会涉及到解析pulgins配置、typeAliases配置、settings配置etc，最终会将配置加载到全文配置Configure中，在Executor 或者 StatementHandler中会使用<code>this.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</code>来执行Plugin。</p></blockquote><p>解析方法链：</p><pre><code class=" mermaid">sequenceDiagramsessionFactoryBuilder-&gt;&gt;xmlConfigBuilder: parser.parse()Note right of sessionFactoryBuilder: builder.build()调用\nXmlConfigBuilder.parser()xmlConfigBuilder-&gt;&gt;Configuration:configuration.addInterceptor()Note right of xmlConfigBuilder: XMLConfiguretion解析\n配置文件将Plugin\n实例化后加入到全\n文配置Configure中Configuration-&gt;&gt;InterceptorChain:chain.addInterceptor()Note right of Configuration: 最终调用InterceptorChain的\naddInterceptor()方\n法加入掉调用链上。</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
      <tag>分表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 遍历网页代码抓取文字和图片</title>
    <link href="/2023/02/12/python%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%9B%BE%E7%89%87/"/>
    <url>/2023/02/12/python%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-遍历网页代码抓取文字和图片"><a href="#Python-遍历网页代码抓取文字和图片" class="headerlink" title="Python 遍历网页代码抓取文字和图片"></a>Python 遍历网页代码抓取文字和图片</h1><p>通过python的几个工具requests，beautifulSoup，json, Pool暴力遍历url抓取内容</p><ul><li><strong>获取全量的文字和图片链接</strong></li><li><strong>获取图片</strong></li></ul><h2 id="获取全量的文字和图片链接"><a href="#获取全量的文字和图片链接" class="headerlink" title="获取全量的文字和图片链接"></a>获取全量的文字和图片链接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">##地址就补贴了。哈哈</span><br>url_root = <span class="hljs-string">&#x27;xxxx&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geturl</span>(<span class="hljs-params">num</span>):<br><span class="hljs-keyword">return</span> url_root + <span class="hljs-built_in">str</span>(num);<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geturls</span>(<span class="hljs-params">num</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>(geturl, <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>,num));<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getdata</span>(<span class="hljs-params">url</span>):<br>datalist=&#123;&#125;<br>response = requests.get(url)<br><span class="hljs-keyword">if</span> response.status_code != <span class="hljs-number">200</span> :<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;noValue&quot;</span>:<span class="hljs-string">&quot;noValue&quot;</span>&#125;<br><br>soup = bs4.BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-comment">## 获取index</span><br>datalist[<span class="hljs-string">&#x27;index&#x27;</span>] = soup.title.string[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment">## 获取内容</span><br><span class="hljs-keyword">for</span> meta <span class="hljs-keyword">in</span> soup.select(<span class="hljs-string">&#x27;meta&#x27;</span>):<br><span class="hljs-keyword">if</span> meta.get(<span class="hljs-string">&#x27;name&#x27;</span>) == <span class="hljs-string">&#x27;description&#x27;</span>:<br>datalist[<span class="hljs-string">&#x27;content&#x27;</span>] = meta.get(<span class="hljs-string">&#x27;content&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment">##获取图片</span><br>datalist[<span class="hljs-string">&#x27;img&#x27;</span>] = soup.find_all(<span class="hljs-string">&#x27;img&#x27;</span>)[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;src&#x27;</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">return</span> datalist<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>pool = Pool(processes=<span class="hljs-number">10</span>)<br>datalist = []<br>urls = geturls(<span class="hljs-number">1314</span>);<br>start = time.time()<br>datalist = pool.<span class="hljs-built_in">map</span>(getdata, urls)<br>end = time.time()<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;use:%.2f s&#x27;</span> %(end -start)<br>jsondata = json.dumps(&#123;<span class="hljs-string">&#x27;data&#x27;</span>:datalist&#125;, ensure_ascii=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span> ) <span class="hljs-keyword">as</span> outfile:<br>outfile.write(jsondata)<br>outfile.close()<br></code></pre></td></tr></table></figure><hr><h2 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h2><h2 id="解析第一个script得到的格式化内容，通过pool并发的区下载图片"><a href="#解析第一个script得到的格式化内容，通过pool并发的区下载图片" class="headerlink" title="解析第一个script得到的格式化内容，通过pool并发的区下载图片"></a>解析第一个script得到的格式化内容，通过pool并发的区下载图片<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br>import json<br>import requests<br><span class="hljs-built_in">from</span> multiprocessing import Pool<br><br>def downImge(imgurl):<br>file_name = imgurl.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-built_in">len</span>(imgurl.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)) <span class="hljs-number">-1</span> ]<br>response = requests.<span class="hljs-built_in">get</span>(imgurl, stream=True)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span> :<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;image/&quot;</span>+file_name, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.<span class="hljs-built_in">write</span>(response.content)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>datalist = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>datalist = json.loads(f.<span class="hljs-built_in">read</span>())<br>f.<span class="hljs-built_in">close</span>()<br>imglist = []<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">item</span> <span class="hljs-keyword">in</span> datalist[<span class="hljs-string">&#x27;data&#x27;</span>]:<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">item</span>.has_key(<span class="hljs-string">&#x27;img&#x27;</span>):<br>imglist.append(<span class="hljs-keyword">item</span>[<span class="hljs-string">&#x27;img&#x27;</span>])<br><br>pool = Pool(<span class="hljs-number">10</span>)<br>pool.map(downImge, imglist)<br></code></pre></td></tr></table></figure></h2>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序-归档</title>
    <link href="/2023/02/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/"/>
    <url>/2023/02/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 快速排序</span><br><span class="hljs-comment"> * Created by xueping.you on 15-8-5.</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> QuickSort &#123;<br>    <span class="hljs-keyword">private</span> final static Logger logger = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(QuickSort.<span class="hljs-params">class</span>)</span>;<br><br>    public static void quick<span class="hljs-constructor">Sort(<span class="hljs-params">int</span> []<span class="hljs-params">unSortArray</span> , <span class="hljs-params">int</span> <span class="hljs-params">left</span> , <span class="hljs-params">int</span> <span class="hljs-params">right</span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> low = left;<br>        <span class="hljs-built_in">int</span> high = right;<br>        <span class="hljs-keyword">if</span>(low&gt;=high)<br>            return;<br>        <span class="hljs-built_in">int</span> temp = unSortArray<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-keyword">while</span> (left&lt;right<span class="hljs-operator"> &amp;&amp; </span>unSortArray<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>&gt;=temp)right--;<br>            unSortArray<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>=unSortArray<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>;<br>            <span class="hljs-keyword">while</span> (left&lt;right<span class="hljs-operator"> &amp;&amp; </span>unSortArray<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>&lt;=temp)left++;<br>            unSortArray<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>=unSortArray<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>;<br>        &#125;<br>        unSortArray<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>=temp;<br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">unSortArray</span>, <span class="hljs-params">low</span>, <span class="hljs-params">left</span>)</span>;<br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">unSortArray</span>, <span class="hljs-params">left</span>+1, <span class="hljs-params">high</span>)</span>;<br>    &#125;<br><br>    public static void main(String <span class="hljs-literal">[]</span>args)&#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-literal">[]</span> <span class="hljs-built_in">array</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">31</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        logger.info(<span class="hljs-string">&quot;before:&#123;&#125;&quot;</span>, <span class="hljs-built_in">array</span>);<br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">array</span>,0 , <span class="hljs-params">array</span>.<span class="hljs-params">length</span>-1)</span>;<br>        logger.info(<span class="hljs-string">&quot;after:&#123;&#125;&quot;</span>,<span class="hljs-built_in">array</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>result:<br>19:30:11.835 [main] INFO  com.qyou.data.arithmetic.QuickSort - before:[12, 10, 2, 45, 31, 56, 1, 9]<br>19:30:11.845 [main] INFO  com.qyou.data.arithmetic.QuickSort - after:[1, 2, 9, 10, 12, 31, 45, 56]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插入排序-归档</title>
    <link href="/2023/02/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/"/>
    <url>/2023/02/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入排序</span><br><span class="hljs-comment"> * Created by xueping.you on 15-8-5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> InsertSort &#123;<br>    private final static Logger logger = LoggerFactory.getLogger(InsertSort.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> insertSort(<span class="hljs-type">int</span> []unSortArray)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;unSortArray.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(unSortArray[i<span class="hljs-number">-1</span>]&gt;unSortArray[i])&#123;<br>                <span class="hljs-type">int</span> j=i;<br>                <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span>=unSortArray[i];<br>                <span class="hljs-keyword">while</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; unSortArray[j<span class="hljs-number">-1</span>]&gt;<span class="hljs-keyword">temp</span>)&#123;<br>                    unSortArray[j]=unSortArray[j<span class="hljs-number">-1</span>];<br>                    j<span class="hljs-comment">--;</span><br>                &#125;<br>                unSortArray[j]=<span class="hljs-keyword">temp</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String []args)&#123;<br>        <span class="hljs-type">int</span> [] <span class="hljs-keyword">array</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">31</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        logger.<span class="hljs-keyword">info</span>(&quot;before:&#123;&#125;&quot;, <span class="hljs-keyword">array</span>);<br>        insertSort(<span class="hljs-keyword">array</span>);<br>        logger.<span class="hljs-keyword">info</span>(&quot;after:&#123;&#125;&quot;,<span class="hljs-keyword">array</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>result:<br>19:29:10.340 [main] INFO  com.qyou.data.arithmetic.InsertSort - before:[12, 10, 2, 45, 31, 56, 1, 9]<br>19:29:10.352 [main] INFO  com.qyou.data.arithmetic.InsertSort - after:[1, 2, 9, 10, 12, 31, 45, 56]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习01-kNN邻近算法</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A001-kNN%E9%82%BB%E8%BF%91%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A001-kNN%E9%82%BB%E8%BF%91%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="k-近邻算法"><a href="#k-近邻算法" class="headerlink" title="k-近邻算法"></a>k-近邻算法</h1><p>概述：k-近邻算法采用测量不同特征值之间的距离方法进行分类<br>优点：精度高、对于异常值不敏感，无数据输入假定<br>缺点：计算复杂度高，空间复杂度高,并且它没有办法各处基础数据的一些内部信息数据。<br>算法描述：存在一个准确的数据集合样本，称作训练样本集，样本集合中每个item都附带自己所属分类标签。当需要判断新数据的分类是，只需要计算特征数据和样本数据中最相似的分类标签，选择k个最相似的标签，k个标签中占比最多的即为目标标签。</p><h2 id="具体分类算法"><a href="#具体分类算法" class="headerlink" title="具体分类算法"></a>具体分类算法</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#-*- coding=utf-8 -*-</span><br><span class="hljs-attribute">from</span> numpy import *<br><span class="hljs-attribute">import</span> operator<br><br><span class="hljs-comment">##简单的kNN算法实现</span><br><span class="hljs-comment">#dataSet是训练数据集合，每行代表每个训练数据的每个特征值</span><br><span class="hljs-comment">#labels 对应dataSet每个训练数据的class标签</span><br><span class="hljs-comment">#inX 表示待分类的特征数据</span><br><span class="hljs-attribute">def</span> classify0(inX, dataSet, labels, k):<br><span class="hljs-attribute">dataSetSize</span> = dataSet.shape[<span class="hljs-number">0</span>] # 获取测试集合大小<br><span class="hljs-comment">#求每个输入特征值和每个测试集合总的特征值的超时</span><br><span class="hljs-comment">#首先需要使用tile将特征值扩展为和测试集合相等大小的矩阵</span><br><span class="hljs-attribute">diffMat</span> = tile(inX, (dataSetSize, <span class="hljs-number">1</span>)) - dataSet<br><span class="hljs-comment">#取平方</span><br><span class="hljs-attribute">sqlDiffMat</span> = diffMat ** <span class="hljs-number">2</span><br><span class="hljs-attribute">sumMat</span> = sqlDiffMat.sum(axis=<span class="hljs-number">1</span>)<br><span class="hljs-attribute">distances</span> = sumMat ** <span class="hljs-number">0</span>.<span class="hljs-number">5</span><br><span class="hljs-comment">#获取排序信息</span><br><span class="hljs-comment">#例如:array([9,1,3,0]) -&gt; array([3,1,2,0]) 升序标签</span><br><span class="hljs-attribute">sortIndicies</span> = distances.argsort()<br><br><span class="hljs-attribute">classCount</span> = &#123;&#125;<br><span class="hljs-comment">#取距离最小的前k个对应的标签统计信息</span><br><span class="hljs-attribute">for</span> i in range(k):<br><span class="hljs-attribute">label</span> = labels[sortIndicies[i]]<br><span class="hljs-attribute">classCount</span>[label] = classCount.get(label,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-comment">#取最大的</span><br><br><span class="hljs-attribute">sortedClassCount</span> = sorted(classCount.iteritems(), key = operator.itemgetter(<span class="hljs-number">1</span>), reverse=True) <br><span class="hljs-attribute">return</span> sortedClassCount[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><br></code></pre></td></tr></table></figure><h2 id="关于特征数据"><a href="#关于特征数据" class="headerlink" title="关于特征数据"></a>关于特征数据</h2><p>不同的特征，具体的数据值波动区间是不同的，例如特征A取值范围在[1000,10000],但是特征B取值范围在[0,10]，如果直接使用这样的特征数据进行KNN算法运算，会出现的一个问题，高区间的特征对结果的影响远远大于低区间的特征值，因此我们需要对我们的特征数据做归一化处理，即将所有特征值处理到相同的区间范围中。<br>具体算法：((特征值-min)&#x2F;(max - min)) -&gt; [0,1]区间范围</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">from numpy import *<br>import operator<br><span class="hljs-comment">#用于将一个不同范围域的特征值归一化到统一的[0,1]之间</span><br>def <span class="hljs-keyword">normData(dataSet):</span><br><span class="hljs-keyword"></span><span class="hljs-comment">#获取每个特征的最大值</span><br>maxValue = dataSet.max(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#获取每个特征的最小值</span><br>minValue = dataSet.min(<span class="hljs-number">0</span>)<br>ranges=maxValue-minValue<br><span class="hljs-comment">#将数据归一到同一个范围</span><br><span class="hljs-keyword">normalDataSet </span>= zeros(<span class="hljs-keyword">shape(dataSet))</span><br><span class="hljs-keyword"></span>m = dataSet.<span class="hljs-keyword">shape[0]</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">normalDataSet </span>= dataSet - tile(ranges,(m,<span class="hljs-number">1</span>))<br><span class="hljs-comment">#除于最大值</span><br><span class="hljs-keyword">normalDataSet </span>= <span class="hljs-keyword">normalDataSet/tile(maxValue,(m,1))</span><br><span class="hljs-keyword"></span><br>return <span class="hljs-keyword">normalDataSet, </span>ranges, minValues<br></code></pre></td></tr></table></figure><h2 id="关于可视化特征数据"><a href="#关于可视化特征数据" class="headerlink" title="关于可视化特征数据"></a>关于可视化特征数据</h2><p>如何判别我们取得的特征数据集合适合使用knn进行分类训练？<br>在做数据观察时我们往往需要通过可视化方式去观察我们的特征数据和label的分布，这个时候就需要用到Python的一个图形工具matplotlib。<br>特征和分类数据：testSet.txt<br>3.542485       1.977398       -1<br>3.018896       2.556416       -1<br>7.551510       -1.580030      1<br>2.114999       -0.004466      -1<br>8.127113       1.274372       1<br>7.108772       -0.986906      1<br>8.610639       2.046708       1<br>2.326297       0.265213       -1<br>3.634009       1.730537       -1<br>0.341367       -0.894998      -1<br>3.125951       0.293251       -1<br>2.123252       -0.783563      -1<br>0.887835       -2.797792      -1<br>7.139979       -2.329896      1<br>1.696414       -1.212496      -1<br>8.117032       0.623493       1<br>8.497162       -0.266649      1<br>4.658191       3.507396       -1<br>8.197181       1.545132       1<br>1.208047       0.213100       -1<br>1.928486       -0.321870      -1<br>2.175808       -0.014527      -1<br>7.886608       0.461755       1<br>3.223038       -0.552392      -1<br>3.628502       2.190585       -1<br>7.407860       -0.121961      1<br>7.286357       0.251077       1</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wqoUeSPR-1676187565160)(<a href="http://oe7d0gss7.bkt.clouddn.com/14750464452901.jpg?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/14750464452901.jpg?imageView2/3/w/400/h/400)]</a></p><p><strong>可视化脚本:</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br><span class="hljs-built_in">from</span> numpy import *<br>import matplotlib<br>import matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">##read file</span><br>fr = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;testSet.txt&#x27;</span>)<br><span class="hljs-keyword">lines</span> = fr.readlines()<br>dataSet = zeros((<span class="hljs-built_in">len</span>(<span class="hljs-keyword">lines</span>),<span class="hljs-number">1</span>))<br>labels = []<br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">lines</span>:<br><span class="hljs-keyword">items</span> = <span class="hljs-built_in">line</span>.strip().<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>dataSet[index:] = <span class="hljs-keyword">items</span>[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>labels.append(<span class="hljs-keyword">items</span>[<span class="hljs-number">-1</span>])<br><span class="hljs-comment">#matplot</span><br>fx = plt.figure()<br>ax = fx.add_subplot(<span class="hljs-number">111</span>)<br><span class="hljs-comment">#将数组转换为矩阵</span><br>dataSet = matrix(dataSet)<br>colora = tile(<span class="hljs-number">50</span>, <span class="hljs-built_in">len</span>(<span class="hljs-keyword">lines</span>))<br><span class="hljs-comment">#这里的colora是为了通过颜色区分不同的labels， cmap代表颜色map，默认是yard， s是每个点的大小，alpha是每个点的透明度</span><br>ax.scatter(dataSet[:,<span class="hljs-number">0</span>], dataSet[:,<span class="hljs-number">1</span>], c=colora * labels, cmap=<span class="hljs-string">&#x27;autum&#x27;</span>, s=<span class="hljs-number">50</span>, alpha=<span class="hljs-number">0.3</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习02-决策树ID3算法</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A002-%E5%86%B3%E7%AD%96%E6%A0%91ID3%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A002-%E5%86%B3%E7%AD%96%E6%A0%91ID3%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>概述：通过分析每个数据特征项在分类过程中所起到的所用比重，将数据划分为几个数据子集，如果某个数据子集数据同一类型，则无需再继续划分数据分类，如果不属于同一分类，则需要在对数据子集进行分割。<br>优点：计算复杂度不高。<br>缺点：可能会出现由于样本特征值对应的样本数量不统一导致结果偏向于数量多的样本对应的分类。</p><p>##具体分类算法 ID3算法<br>在每次划分数据集时我们会取一个特征属性来进行划分，那么这里有一个问题，例如训练样本里面有20个特征值，我们如何从这些特征中选择当前用于划分的最适合的特征项呢？我们需要找到一个有效的量化方法来划分数据。</p><h3 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h3><table><thead><tr><th>样本id</th><th>是否需要浮出水面</th><th>是否有脚蹼</th><th>属于鱼</th></tr></thead><tbody><tr><td>1</td><td>是</td><td>是</td><td>是</td></tr><tr><td>2</td><td>是</td><td>是</td><td>是</td></tr><tr><td>3</td><td>是</td><td>否</td><td>是</td></tr><tr><td>4</td><td>否</td><td>是</td><td>否</td></tr><tr><td>5</td><td>否</td><td>是</td><td>否</td></tr></tbody></table><p>我们划分数据的原则是将无须的数据变得更加有序，这里有一个信息增益的概念：即数据在划分前后的信息发生的变化成为信息增益。因此我们需要计算每个特征值的数据划分之后的信息增益值，选取最大的信息增益特征值作为当前数据划分特征。集合信息的度量方式成为熵，我们需要计算我们的信息集合熵值。<br>熵的计算公式：$H &#x3D; -log_2p(x_i)$ 对于集合的熵计算公式：$H &#x3D; -\sum_{i&#x3D;1}^np(x_i)log_2p(x_i)$<br><strong>计算信息熵算法</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment">#-*- coding=utf-8 -*-</span><br><span class="hljs-keyword">from</span> numpy import *<br><span class="hljs-keyword">from</span> math import <span class="hljs-keyword">log</span><br>import operator<br><br>def calcShannonEnt(dataSet):<br><span class="hljs-keyword">label</span>Counts = &#123;&#125; <span class="hljs-comment">#统计每个标签的次数</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> dataSet:<br><span class="hljs-keyword">label</span> = line[-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">label</span>Counts[<span class="hljs-keyword">label</span>] = <span class="hljs-keyword">label</span>Counts.get(<span class="hljs-keyword">label</span>, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>shannonEnt = <span class="hljs-number">0.0</span><br><span class="hljs-comment">#统计信息熵</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-keyword">label</span>Counts:<br>prob = float(<span class="hljs-keyword">label</span>Counts[key])/len(dataSet)<br>shannonEnt -= prob * <span class="hljs-keyword">log</span>(prob, <span class="hljs-number">2</span>)<br>return shannonEnt<br></code></pre></td></tr></table></figure><h3 id="数据划分code"><a href="#数据划分code" class="headerlink" title="数据划分code"></a>数据划分code</h3><p>由于是决策树因此我们需要将集合划分为不同的子集</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#例如上面的通过是否浮出水面划分数据就能得到两个子集</span><br><span class="hljs-comment">#子集1</span><br><span class="hljs-comment">#是否有脚蹼|属于鱼类</span><br><span class="hljs-comment">#是 | 是</span><br><span class="hljs-comment">#是 | 是</span><br><span class="hljs-comment">#否 | 是</span><br><span class="hljs-comment">#子集2</span><br><span class="hljs-comment">#是 | 否</span><br><span class="hljs-comment">#是 | 否</span><br><span class="hljs-comment">#axis表示特征项，value表示需要匹配的特征值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">splitDataSet</span>(<span class="hljs-params">dataSet, axis, value</span>):<br>resultDataSet = []<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-symbol">dataSet:</span><br><span class="hljs-keyword">if</span> line[axis] == <span class="hljs-symbol">value:</span><br>reduceValue = line[<span class="hljs-symbol">:axis</span>]<br>reduceValue.<span class="hljs-keyword">extend</span>(line[axis+<span class="hljs-number">1</span> : ])<br>resultDataSet.append(reduceValue)<br><br><span class="hljs-keyword">return</span> resultDataSet<br></code></pre></td></tr></table></figure><h3 id="选择最优的划分属性"><a href="#选择最优的划分属性" class="headerlink" title="选择最优的划分属性"></a>选择最优的划分属性</h3><p>由于有上面两个方法作为基础，我们可以通过下面的代码来寻找最适合划分的特征值</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">def chooseBestSplitFeature(dataSet):<br>featureCount = len(dataSet[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span><br><span class="hljs-comment">#计算当前的熵值</span><br>currentShannonEnt = calcShannonEnt(dataSet)<br><span class="hljs-comment">#定义信息增益</span><br><span class="hljs-keyword">bestInfoGain </span>= <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-comment">#定义返回值</span><br><span class="hljs-keyword">bestAxis </span>= -<span class="hljs-number">1</span><br><span class="hljs-comment">#遍历每个特征项</span><br>for i in range(featureCount):<br>featureValues = set([value[i] for value in dataSet])<br><span class="hljs-keyword">subShannonEnt </span>= <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>for featureValue in featureValues:<br><span class="hljs-keyword">subDataSet </span>= splitDataSet(dataSet, i, featureValues)<br><span class="hljs-keyword">subDataSetProb </span>= float(<span class="hljs-keyword">subDataSet)/len(dataSet)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">subShannonEnt </span>+= <span class="hljs-keyword">subDataSetProb </span>* calcShannonEnt(<span class="hljs-keyword">subDataSet)</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">subInfoGain </span>= currentShannonEnt - <span class="hljs-keyword">subShannonEnt</span><br><span class="hljs-keyword"></span><span class="hljs-comment">#判断当先最优的划分特征</span><br>if <span class="hljs-keyword">subInfoGain </span>&gt; <span class="hljs-keyword">bestInfoGain </span>:<br><span class="hljs-keyword">bestInfoGain </span>= <span class="hljs-keyword">subInfoGain</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bestAxis </span>= i<br><br>return <span class="hljs-keyword">bestAxis</span><br></code></pre></td></tr></table></figure><h3 id="构建决策树"><a href="#构建决策树" class="headerlink" title="构建决策树"></a>构建决策树</h3><p>我们可以通过一个map来表示我们的决策树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">createTree</span>(<span class="hljs-params">dataSet</span>):<br>classList = [value[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> dataSet]<br><span class="hljs-comment">#如果所有的classList一致则直接返回</span><br><span class="hljs-keyword">if</span> classList.count(classList[<span class="hljs-number">0</span>]) == <span class="hljs-built_in">len</span>(classList):<br><span class="hljs-keyword">return</span> classList[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dataSet[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>:<br><span class="hljs-comment">##这里的case场景是，已经没有可用的特征项时，针对剩余的分类如何决定目标分类</span><br><span class="hljs-comment">#return dataSet[0]</span><br><span class="hljs-comment">#这里采用取占比最多的值</span><br><span class="hljs-keyword">return</span> major(dataSet)<br><span class="hljs-comment">#选择分类属性</span><br>axis = chooseBestSplitFeature(dataSet)<br><span class="hljs-comment">#定义tree树 属性 index-&gt;Map</span><br>myTree = &#123;axis:&#123;&#125;&#125;<br>featureList = <span class="hljs-built_in">set</span>([value[axis] <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> dataSet])<br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> featureList :<br>mytree[axis][feature] = createTree(splitDateSet(dataSet, axis, feature))<br><br><span class="hljs-keyword">return</span> mytree<br><br><span class="hljs-comment"># 去占比最多的分类值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">major</span>(<span class="hljs-params">dataSet</span>):<br>labelCount=&#123;&#125;<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> dataSet:<br>labelCount[line[-<span class="hljs-number">1</span>] = labelCount.get(line[-<span class="hljs-number">1</span>], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-comment">#排序</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(labelCount.iteritems(), key = operator.itemgetter(<span class="hljs-number">1</span>), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="关于python的序列化"><a href="#关于python的序列化" class="headerlink" title="关于python的序列化"></a>关于python的序列化</h3><p>决策树构建完成之后，我们可以将决策树序列化到一个文件中，以便以后直接使用，这里就涉及到python的序列化模块pickle</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">storeTree</span>(<span class="hljs-params">myTree, fileName</span>):<br>fw = <span class="hljs-built_in">open</span>(fileName, <span class="hljs-string">&#x27;w&#x27;</span>)<br>pickle.dumps(myTree, fw)<br>fw.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readTree</span>(<span class="hljs-params">fileName</span>):<br>fr = <span class="hljs-built_in">open</span>(fileName)<br><span class="hljs-keyword">return</span> pickle.load(fr)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习03-贝叶斯算法</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A003-%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A003-%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="朴素贝叶斯算法"><a href="#朴素贝叶斯算法" class="headerlink" title="朴素贝叶斯算法"></a>朴素贝叶斯算法</h1><p>如下图的点分布图：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zXhT2CNC-1676187677517)(<a href="http://oe7d0gss7.bkt.clouddn.com/bayes.jpg?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/bayes.jpg?imageView2/3/w/400/h/400)]</a><br>给定单(x,y), 它属于红色区域c1概率p1, 蓝色区域c2概率p2</p><ul><li>如果p1(x,y) &gt; p2(x,y) , 那么类别为1</li><li>如果p1(x,y) &lt; p2(x,y) , 那么类别为2<br>我们在判断(x,y)时会选择高概率所对应的类别，贝叶斯的理论就是选择最高概率的决策。<br>这里我们观察的两个公式<br><code>p(x|c) = p(x and c) / p(c)</code><br><code>p(c|x) = p(x|c)p(c) / p(x)</code><br>将这个公式应用到我们的分类算中，求上面的p1，p2 转换为 p(c1|x, y)，p(c2|x, y)通过上面的转换公式可以转换为 p(c1|x, y) &#x3D; p(x,y |c1)p(c1) &#x2F; p(x,y) , p(c2|x, y) &#x3D; p(x, y| c2) p(c2) &#x2F; p(x, y)</li><li>当p(c1|x,y) &gt; p(c2|x,y) , 则（x,y）属于类别1</li><li>当p(c1|x,y) &lt; p(c2|x,y) , 则（x,y）属于类别2<br>对于一个实例我们需要关心的可能是多个维度的特征值以及特征值在实例分类中的概率分布，因此我们将上面的p(c1|x, y)替换为 p(c1|w),其中w为一个多维的特征向量。上面的公式就转换为 p(c1|w) &#x3D; p(w|c1)p(c1)&#x2F;p(w) 和 p(c2|w) &#x3D; p(w|c2)p(c2)&#x2F;p(w)。<br>单独看p(w)在朴素贝叶斯理论中我们做的一个假设是，p(w1,w2,w3….wn)的每个特征向量不存在相关性，p(w1,w2,w3….wn)退化为计算p(w1)p(w2)p(3)…p(wn)。<br>下面通过一个垃圾邮件分类算法具体介绍如何使用朴素贝叶斯概率分布实现机器学习和垃圾邮件分类：</li><li>首先我们需要从训练文本中提取全量特征值，具体做法是将文本进行切分成单个词条</li><li>其次我们需要将每条训练数据的特征值转换为一个特征向量</li><li>通过计算训练数据的特征向量以及对应的分类数据获取整个分类在全量特征值中的概率分布</li><li>通过需要计算分类的条目的特征向量，计算出条目对应的每个分类的概率，选取概率大的分类作为目标分类</li></ul><h2 id="垃圾邮件过滤算法"><a href="#垃圾邮件过滤算法" class="headerlink" title="垃圾邮件过滤算法"></a>垃圾邮件过滤算法</h2><p>训练集合：<br>[<br>[‘my’, ‘dog’, ‘has’, ‘flea’, ‘problems’, ‘help’, ‘please’],<br>[‘maybe’, ‘not’, ‘take’, ‘him’, ‘to’, ‘dog’, ‘park’, ‘stupid’],<br>[‘my’, ‘dalmation’, ‘is’, ‘so’, ‘cute’, ‘I’, ‘love’, ‘him’],<br>[‘stop’, ‘posting’, ‘stupid’, ‘worthless’, ‘garbage’],<br>[‘mr’, ‘licks’, ‘ate’, ‘my’, ‘steak’, ‘how’, ‘to’, ‘stop’, ‘him’],<br>[‘quit’, ‘buying’, ‘worthless’, ‘dog’, ‘food’, ‘stupid’]<br>]<br>训练集合对应的分类(0表示正常评论，1表示侮辱评论)：<br>[0, 1, 0, 1, 0, 1]</p><h3 id="获取所有特征属性"><a href="#获取所有特征属性" class="headerlink" title="获取所有特征属性"></a>获取所有特征属性</h3><p>代码实现：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">#-*- coding=utf<span class="hljs-number">-8</span> -*-<br>form numpy <span class="hljs-keyword">import</span> *<br>## 这里的dataSet每个item对应测试数据中的词条（单词）<br>def getVecList(dataSet):<br>vecList = set([])<br>for line <span class="hljs-keyword">in</span> dataSet:<br>vacList = vacList | set(line)<br><br>return list(vecList)<br><br>## 最终获得的所有特征属性<br>## set([<span class="hljs-string">&#x27;cute&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;garbage&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;problems&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;park&#x27;</span>, <span class="hljs-string">&#x27;stop&#x27;</span>, <span class="hljs-string">&#x27;flea&#x27;</span>, <span class="hljs-string">&#x27;dalmation&#x27;</span>, <span class="hljs-string">&#x27;licks&#x27;</span>, <span class="hljs-string">&#x27;food&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;him&#x27;</span>, <span class="hljs-string">&#x27;buying&#x27;</span>, <span class="hljs-string">&#x27;posting&#x27;</span>, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-string">&#x27;worthless&#x27;</span>, <span class="hljs-string">&#x27;ate&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;maybe&#x27;</span>, <span class="hljs-string">&#x27;please&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;how&#x27;</span>, <span class="hljs-string">&#x27;stupid&#x27;</span>, <span class="hljs-string">&#x27;so&#x27;</span>, <span class="hljs-string">&#x27;take&#x27;</span>, <span class="hljs-string">&#x27;mr&#x27;</span>, <span class="hljs-string">&#x27;steak&#x27;</span>, <span class="hljs-string">&#x27;my&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="计算数据的特征向量"><a href="#计算数据的特征向量" class="headerlink" title="计算数据的特征向量"></a>计算数据的特征向量</h3><p>特征向量表示的每个训练item的一个特征分布<br>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding=utf-8 -*-</span><br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getVec</span>(<span class="hljs-params">dataItem, vecList</span>):<br><span class="hljs-comment">#初始化特征向量，0 表示特征值不存在 1表示特征值存在</span><br>vecResult = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(vecList)<br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> dataItem:<br><span class="hljs-keyword">if</span> feature <span class="hljs-keyword">in</span> vecList:<br><span class="hljs-comment">##特征值存在获取向量id</span><br>vecResult[vecList.index(feature)] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">return</span> vecResult<br><br><span class="hljs-comment">#result:</span><br><span class="hljs-comment">#[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1]</span><br><span class="hljs-comment">#[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0]</span><br><span class="hljs-comment">#[1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]</span><br><span class="hljs-comment">#[0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]</span><br><span class="hljs-comment">#[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1]</span><br><span class="hljs-comment">#[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="分类训练算法"><a href="#分类训练算法" class="headerlink" title="分类训练算法"></a>分类训练算法</h3><p>输入为上面方法得到的特征向量和每个特征向量对应的分类<br>代码实现：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs dns">#trainMatrix 特征向量举证<br>#trainCategory 特征分类<br>def trainNB0(trainMatrix, trainCategory):<br>       numTrainDocs = len(trainMatrix)<br>       numWords = len(trainMatrix[<span class="hljs-number">0</span>])<br>       pAbusive = sum(trainCategory)/float(numTrainDocs)<br>       #p0Num = zeros(numWords)<br>       #p1Num = zeros(numWords)<br>       #p0Denom = <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>       #p1Denom = <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>       #如果按照上面的计算方法会得出特别多的<span class="hljs-number">0</span>，这个时候在去算p0*p1..pn时就会出现乘<span class="hljs-number">0</span>的情况<br>       #因此为了解决这个情况，采用下面的初始化方式<br>       #这种方式最终对于概率计算没有影响，因为大家的基数都是一样的<br>       p0Num = ones(numWords)<br>       p1Num = ones(numWords)<br>       p0Denom = <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br>       p1Denom = <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br>       for i in range(numTrainDocs):<br>       if trainCategory[i] == <span class="hljs-number">1</span>:<br>       p1Num += trainMatrix[i]<br>       p1Denom += sum(trainMatrix[i])<br>       else:<br>       p0Num += trainMatrix[i]<br>       p0Denom += sum(trainMatrix[i])<br><br>       #p1Vect = p1Num/p1Denom<br>       #p0Vect = p0Num/p0Denom<br>       #这里有个问题由于上面这种方式计算出来的概率都是小数位，因此采用这些小概率做p0*p1*....pn就会造成最终得到的概率四舍五入之后=<span class="hljs-number">0</span><br>       #为了解决这个问题采用对数的方式将所有的结果概率等条件的放大<br>       #对于log(p1Num/p1Denom) 与 p1Num/p1Denom 具有等效性 <br>       p1Vect = log(p1Num/p1Denom)<br>       p0Vect = log(p0Num/p0Denom)<br>       return p0Vect, p1Vect, pAbusive<br>       <br> #Result :<br> #p0Vect :<br> #[-<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">3.25809654</span>,<br>       -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">2.56494936</span>,<br>       -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">3.25809654</span>,<br>       -<span class="hljs-number">2.15948425</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>,<br>       -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">2.56494936</span>,<br>       -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">3.25809654</span>, -<span class="hljs-number">2.56494936</span>,<br>       -<span class="hljs-number">2.56494936</span>, -<span class="hljs-number">1.87180218</span>]<br> #p1Vect :<br> #[-<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>,<br>       -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>,<br>       -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>,<br>       -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">1.94591015</span>,<br>       -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">1.94591015</span>,<br>       -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">1.65822808</span>, -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">2.35137526</span>, -<span class="hljs-number">3.04452244</span>,<br>       -<span class="hljs-number">3.04452244</span>, -<span class="hljs-number">3.04452244</span>]<br> #pAbusive:<br> #<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>至此我们就得到了通过所有训练样本计算出来的样本特征值的概率分布信息，这个概率分布信息可以用于统计分类执行特征的分类。<br>例如具体使用Code：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">classifyNB</span>(vec2Classify, p0Vec, p1Vec, pClass1):<br>#这里使用的是<span class="hljs-built_in">ln</span>(<span class="hljs-built_in">p</span>(w|ci) * <span class="hljs-built_in">p</span>(ci)) = <span class="hljs-built_in">ln</span>(<span class="hljs-built_in">p</span>(w|ci)) + <span class="hljs-built_in">ln</span>(<span class="hljs-built_in">p</span>(ci))<br>       #这里的算法公式是 <span class="hljs-built_in">p</span>(ci|w) = <span class="hljs-built_in">p</span>(w|ci) * <span class="hljs-built_in">p</span>(ci)/<span class="hljs-built_in">p</span>(w)<br>       p1 = <span class="hljs-built_in">sum</span>(vec2Classify*p1Vec) + <span class="hljs-built_in">log</span>(pClass1)<br>       p0 = <span class="hljs-built_in">sum</span>(vec2Classify*p0Vec) + <span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>-pClass1)<br>       if p1 &gt; p0 :<br>       return <span class="hljs-number">1</span><br>       else:<br>       return <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="分类算法测试"><a href="#分类算法测试" class="headerlink" title="分类算法测试"></a>分类算法测试</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#对于贝叶斯分类的测试代码<br>def testing<span class="hljs-constructor">NB()</span>:<br>       listOPosts,listPostClasses = load<span class="hljs-constructor">DataSet()</span><br>       vocabList = create<span class="hljs-constructor">VocabList(<span class="hljs-params">listOPosts</span>)</span><br>       trainMatrix = <span class="hljs-literal">[]</span><br>       <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> listOPosts:<br>       trainMatrix.append(set<span class="hljs-constructor">OfWords2Vec(<span class="hljs-params">vocabList</span>, <span class="hljs-params">line</span>)</span>)<br>       p0V,p1V,pAb = train<span class="hljs-constructor">NB0(<span class="hljs-params">trainMatrix</span>, <span class="hljs-params">listPostClasses</span>)</span><br>       testEntity = <span class="hljs-literal">[&#x27;<span class="hljs-identifier">love</span>&#x27;, &#x27;<span class="hljs-identifier">my</span>&#x27;, &#x27;<span class="hljs-identifier">dalmation</span>&#x27;]</span><br>       thisDoc = set<span class="hljs-constructor">OfWords2Vec(<span class="hljs-params">vocabList</span>, <span class="hljs-params">testEntity</span>)</span><br>       print testEntry, <span class="hljs-string">&quot;classified as : &quot;</span>, classify<span class="hljs-constructor">NB(<span class="hljs-params">thisDoc</span>,<span class="hljs-params">p0V</span>,<span class="hljs-params">p1V</span>,<span class="hljs-params">pAb</span>)</span><br><br></code></pre></td></tr></table></figure><h3 id="关于频率的问题"><a href="#关于频率的问题" class="headerlink" title="关于频率的问题"></a>关于频率的问题</h3><p>其实在实际使用分类算法时某一个词条出现的次数是有实际统计意义的，在上面的训练算法中并没有考虑频率对概率分布的作用参数。我们可以修改特征向量的生成方式让频率作为一个实际参数进入到我们的分类算法中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getVec</span>(<span class="hljs-params">dataItem, vecList</span>):<br><span class="hljs-comment">#初始化特征向量，0 表示特征值不存在 1表示特征值存在</span><br>vecResult = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(vecList)<br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> dataItem:<br><span class="hljs-keyword">if</span> feature <span class="hljs-keyword">in</span> vecList:<br><span class="hljs-comment">##如果特征值重复出现，这里对特征向量值做叠加</span><br>vecResult[vecList.index(feature)] += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">return</span> vecResult<br><br></code></pre></td></tr></table></figure><h3 id="贝叶斯总结"><a href="#贝叶斯总结" class="headerlink" title="贝叶斯总结"></a>贝叶斯总结</h3><p>对于分类而言，使用贝叶斯概率统计方法进行分类比使用硬规则（例如决策树）更为有效，贝叶斯概率准则提供了一种利用已知值来估计未知概率的有效方法。正如我们所做的朴素贝叶斯通过假设各个特征值之间的独立性来降低贝叶斯概率计算的复杂性。虽然独立性的假设并非正确，但是朴素贝叶斯仍是一种有效的分类器。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习04-logistic梯度下降算法</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A004-logistic%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A004-logistic%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="logistic回归算法"><a href="#logistic回归算法" class="headerlink" title="logistic回归算法"></a>logistic回归算法</h1><p>我们将使用Logistic回归分类器来寻找最优值这是一个最优化算法问题。我们在k邻近算法中通过计算给定点到样本集合中所有点的距离，来判断该店所属于的类别，其实我们可以换一种解法，我们可以通过做一条直线将属于label1 和 label2 的两大类的点集进行区分，这样在给点点(x,y)可以通过判断(x,y)再直线的上方和下方来判断(x,y)的类别，那儿我们如何找到最适合的直线呢？ 这里可能有一系列斜率值w直线，我们通过最优算法来确认最优质的w。</p><h2 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h2><h3 id="拟合曲线"><a href="#拟合曲线" class="headerlink" title="拟合曲线"></a>拟合曲线</h3><p>对于给定的训练集我们可以使用曲线去做拟合，如下图：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3bR5rGz4-1676187634000)(<a href="http://oe7d0gss7.bkt.clouddn.com/logistic_01.png?imageView2/3/w/300/h/300)%5D">http://oe7d0gss7.bkt.clouddn.com/logistic_01.png?imageView2/3/w/300/h/300)]</a><br>我们可以为每个特征值赋一个权值w，这样我们就能得到我们的拟合曲线 hθ(x) &#x3D; θ0 + θ1x1 + … θnxn &#x3D; θx,回归算法的目的就是求出W的最佳权值。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>评估我们得到的θ是否合适，我们就需要使用损失算法去计算得到的W带入训练集得到的目标值和正确值之间的差异，这里我们采用平方差来定义损失函数。<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-urGqDWrr-1676187634001)(<a href="http://oe7d0gss7.bkt.clouddn.com/loss_function.png?imageView2/3/w/200/h/50)%5D">http://oe7d0gss7.bkt.clouddn.com/loss_function.png?imageView2/3/w/200/h/50)]</a><br>要找到损失函数的最小值，我们可以采用梯度下降算法去获取，每次按照梯度减少的方向去调整我们的θ，最终能够找到符合损失范围的一个θ值。<br>这里我们就需要J(θ)对θ求偏导，最终得到偏导函数：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LVFahmSj-1676187634001)(<a href="http://oe7d0gss7.bkt.clouddn.com/loss_function_pd.png?imageView2/3/w/200/h/50)%5D">http://oe7d0gss7.bkt.clouddn.com/loss_function_pd.png?imageView2/3/w/200/h/50)]</a><br>偏导函数乘于一个步长序数得到每次回归θ的减少值，下面是最终θ的回归公式：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-sSJktxiU-1676187634001)(<a href="http://oe7d0gss7.bkt.clouddn.com/loss_function_hg.png?imageView2/3/w/200/h/50)%5D">http://oe7d0gss7.bkt.clouddn.com/loss_function_hg.png?imageView2/3/w/200/h/50)]</a></p><p>在进行梯度下降寻找最小值时由于θ的初始值问题有可能最终得到的最小值时区域最小值而非全局最小值。如果我们最终要预测的值试一个0或1，这种时候我们已经可以使用单位阶跃函数Sigmoid f(z) &#x3D; 1&#x2F;(1+e-z) 其中-z是幂数，将hθ(x)带入其中当时f(z)&gt;0.5时属于分类1，当f(z)&lt;0.5时属于分类0。</p><h2 id="使用梯度算法寻找最佳拟合直线"><a href="#使用梯度算法寻找最佳拟合直线" class="headerlink" title="使用梯度算法寻找最佳拟合直线"></a>使用梯度算法寻找最佳拟合直线</h2><p>我们使用在knn里面的训练数据为它们寻找拟合曲线，训练数据分布：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-V7SZzobw-1676187634002)(<a href="http://oe7d0gss7.bkt.clouddn.com/14750464452901.jpg?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/14750464452901.jpg?imageView2/3/w/400/h/400)]</a><br>首先按照往常使用下面脚本加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding=utf-8 -*-</span><br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 加载数据的接口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadDataSet</span>():<br>dataMat = [];labelMat = []<br>fr = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;testSet.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fr.readlines():<br>lineArr = line.strip().split(<span class="hljs-string">&quot;\t&quot;</span>)<br><span class="hljs-comment">#这里的1.0实际定义为 θ0的默认值</span><br>dataMat.append([<span class="hljs-number">1.0</span>, <span class="hljs-built_in">float</span>(lineArr[<span class="hljs-number">0</span>]), <span class="hljs-built_in">float</span>(lineArr[<span class="hljs-number">1</span>])])<br>labelMat.append(<span class="hljs-built_in">int</span>(lineArr[<span class="hljs-number">2</span>]))<br><br><span class="hljs-keyword">return</span> dataMat, labelMat<br><br><span class="hljs-comment">#定义我们的Sigmoid函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmiod</span>(<span class="hljs-params">z</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>/(<span class="hljs-number">1</span> + exp(-z))<br></code></pre></td></tr></table></figure><p>算法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#训练算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dataTrain</span>(<span class="hljs-params">dataMatIn, classLables</span>):<br><span class="hljs-comment">#因为要使用矩阵方法，都先转换为矩阵</span><br>dataMatIn = mat(dataMatIn)<br>classLables = mat(classLables)<br>m,n = shape(dataMatIn)<br><span class="hljs-comment">#m表示测试数据量，n表示特征数</span><br><span class="hljs-comment">#我们为每个特征数指定一个默认的权值</span><br>weights = ones([n,<span class="hljs-number">1</span>])<br><span class="hljs-comment">#设置每次移动的步长，这个步长是可以自己进行调整的</span><br>alpha = <span class="hljs-number">0.001</span><br><span class="hljs-comment">#设置回归次数，其实有两种方法来终止回归，一种是指定回归次数，一种是指定误差值范围</span><br>maxCycles = <span class="hljs-number">500</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxCycles):<br><span class="hljs-comment">#获取预测结果 这里使用的是矩阵乘法 MxN * Nx1 = Mx1</span><br>h = sigmiod(dataMatIn*weights)<br><span class="hljs-comment">#获取误差值，相当于上面的求导公式里面的 hθ(x) - y</span><br><span class="hljs-comment">#当然这里的结果是一个矩阵向量 Mx1矩阵</span><br>error = (h - classLabels)<br><span class="hljs-comment">#一次回归θ 按照公式 θ = θ - alpha * error * dataMatIn</span><br>weights = weights - alpha * dataMatIn.transpose() * error<br><br><span class="hljs-keyword">return</span> weights <br><br><span class="hljs-comment">#分类方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify</span>(<span class="hljs-params">intX, weights</span>):<br>value = sigmiod(inX * weights)<br><span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">0.5</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#weight result:</span><br>matrix([[ <span class="hljs-number">4.12414349</span>],<br>        [ <span class="hljs-number">0.48007329</span>],<br>        [-<span class="hljs-number">0.6168482</span> ]])<br></code></pre></td></tr></table></figure><p>最终得到的拟合直线：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lL2ZKH1d-1676187634003)(<a href="http://oe7d0gss7.bkt.clouddn.com/logistic_002.png?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/logistic_002.png?imageView2/3/w/400/h/400)]</a></p><h3 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h3><p>上面的梯度算法我们的训练集总共有100个数据，回归次数500次，每次回归我们都会涉及到对所有训练集进行计算，计算复杂度太高。因此引出了我们的随机梯度下降算法，该算法一次仅适用一个样本点来更新回归系数，这个算法能够实现在线学习算法，当新样本到达时我们就可以对分类器做增量更新。<br>算法实现：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">randomDataTrain</span>(dataMatIn, classLabels):<br>m,n = <span class="hljs-built_in">shape</span>(dataMatIn)<br>classLabels = <span class="hljs-built_in">mat</span>(classLabels)<br>weights = <span class="hljs-built_in">ones</span>(n)<br>alpha = <span class="hljs-number">0.1</span><br>for i in <span class="hljs-built_in">range</span>(m):<br>#这里是array数组相乘<br>h = <span class="hljs-built_in">sigmoid</span>(<span class="hljs-built_in">sum</span>(dataMatIn[i]*weights.<span class="hljs-built_in">transpose</span>()))<br>error = h - classLabels[i]#一次回归<br>weights = weights - alpha * <span class="hljs-built_in">mat</span>(dataMatIn[i]) * errorreturn weights<br><br>weights result:<br><span class="hljs-built_in">matrix</span>([[ <span class="hljs-number">2.38604812</span>,  <span class="hljs-number">0.95218922</span>, -<span class="hljs-number">0.72978254</span>]])<br></code></pre></td></tr></table></figure><p>拟合曲线绿色的之前表示随机梯度下降得到的值：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PlIv1ok-1676187634003)(<a href="http://oe7d0gss7.bkt.clouddn.com/logistic_003.png?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/logistic_003.png?imageView2/3/w/400/h/400)]</a></p><p>这里可以看出得到的权值并不是最优权值，原因是因为我们的训练集合样本太少。但这并不能说明随机算法比上面的循环算法差，判断一个算法的优劣应该是看它是否收敛，参数是否达到稳定值。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>上面的随机梯度下降算法存在一个挺严重的问题是，由于每次使用其中的一条数据进行训练，会出现由于训练集合里面存在异常的数据项，从而导致我们的特征权值出现比较严重的波动，最终影响算法的收敛，针对这个问题我们可以进行改进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">stocGradAscent1</span>(<span class="hljs-params">dataMatrix, classLabels, numIter=<span class="hljs-number">150</span></span>):<br>    m,n = shape(dataMatrix)<br>    weights = ones(n)   <span class="hljs-comment">#initialize to all ones</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numIter):<br>        dataIndex = <span class="hljs-built_in">range</span>(m)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>         <span class="hljs-comment">#随着循环次数的增加使得我们的每次移动的步长值减少</span><br>            alpha = <span class="hljs-number">4</span>/(<span class="hljs-number">1.0</span>+j+i)+<span class="hljs-number">0.0001</span>  <br>            <span class="hljs-comment">#go to 0 because of the constant</span><br>            randIndex = <span class="hljs-built_in">int</span>(random.uniform(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(dataIndex)))            <br>            h = sigmoid(<span class="hljs-built_in">sum</span>(dataMatrix[randIndex]*weights))<br>            error = classLabels[randIndex] - h<br>            weights = weights + alpha * error * dataMatrix[randIndex]<br>            <span class="hljs-keyword">del</span>(dataIndex[randIndex])<br>    <span class="hljs-keyword">return</span> weights<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习05-支持向量机_1</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A005-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA_1/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A005-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA_1/</url>
    
    <content type="html"><![CDATA[<h1 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h1><h2 id="分隔超平面"><a href="#分隔超平面" class="headerlink" title="分隔超平面"></a>分隔超平面</h2><p>如下图是一组线性可分的二维点，我们可以通过我们可以使用梯度下降算法找到将测试数据进行区分的直线，由于测试数据区分度很高，因此我们可能找到不止一条合适的分割线即多组权值((w0,w1,w2),(w0’,w1’,w2’)….)，这个时候我们如何判定最合适的分割线？同理扩展到3维，n维都存在这个问题。</p><p><strong>因此我们引入分隔超平面的概念，通过确认一个分隔训练集的平面，使得所有训练集合数据尽量的远离该平面，这个平面称之为分隔超平面，对于二维数据超平面为一维的一条直线，对于三维数据超平面为二维平面，对于n维数据超平面为n-1维的面。确定超平面后对于给定数据点如果离超平面的距离越远则最终得到的预测结果越可信。</strong><br>通过利用支持向量来确定分隔超平面，支持向量指离分隔超平面最近的点，使得支持向量到分隔面的距离最大化，就能找到最优的分隔超平面。<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-TfTVsWGZ-1676187744959)(<a href="http://oe7d0gss7.bkt.clouddn.com/svn01.png?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/svn01.png?imageView2/3/w/400/h/400)]</a></p><h2 id="分隔超平面最优化问题"><a href="#分隔超平面最优化问题" class="headerlink" title="分隔超平面最优化问题"></a>分隔超平面最优化问题</h2><p>依据前两章的做法定义超平面表达式 $w^T x + b$，其中b相当于w0，要计算点A到超平面的距离，就需要知道平面的法线，超平面的法线值为 $|w^T + b|&#x2F; ||w||$。在梯度下降中的logistics回归我们使用了Sigmoid函数定义我们的二分类算法 $ h_\theta(x) &#x3D; g(\theta^Tx)&#x3D;\frac{1}{1+e^-\theta^Tx}$ 用来表示函数的特征属于y&#x3D;1的概率：</p><p>    $P(y=1|x;\theta) = h_\theta(x)$    $P(y=0|x;\theta) = 1-h_\theta(x)$</p>当P大于0.5时，特征属于y=1的分类，反之属于y=0的分类。在支持向量机中我们将logistics做了一个变形，定义$h_w,_b(x) = g(w^Tx+b)$ 并且定义：<p>    $g(z) = \begin{cases} 1,&\text{z >= 0}\\ -1, & \text{z<0}\end{cases} $</p>对于超平面$w^Tx + b$当>0时表示数据点在超平面上方分类为1，当<0时表示数据点在超平面下方表示分类为-1，当=0时表示数据点在超平面上这是我们可以默认此时分类为1。###间隔函数需要求数据点到超平面的距离，我们定义 $y\cdot(w^Tx + b)$为我们的间隔函数，其中$y$表示目标分类 -1 或 1，这样我们的间隔函数值就恒大于等于0。函数的目标是为了找出分类器的参数 $w^Tx$ 和 $b$,我们需要先确定我们的支持向量(也叫最小间隔)，然后使得该最小间隔最大，可以写成：$$\arg\, \max_{w,b}\lbrace \min_{n}(y\cdot(w^Tx+b)\cdot\frac{1}{||w||})\rbrace$$公式中$\min_{n}(y\cdot(w^Tx + b )\cdot\frac{1}{||w||})$表示的是超平面的支持向量，$\arg \max_w,_b$使得支持向量距离最大,令所有支持向量$label\cdot(w^Tx +b)$值为1，方程就转换为求 $||w||^{-1}$的最小值。我们又知道只有那些离超平面最近的点的距离才等于1，而其它点都大于1，因此在求值过程中我们需要给函数一个约束条件最终该函数转换为:  $$\begin{cases}\min||w||^2,&\text{式(1)}\\ st. y_i(w^Tx_i + b) -1 >=0 \end{cases}$$<p>上面的公式比较难于理解，这里有另外一种理解方式：定义两个平面<br>$$\begin{cases} w^Tx + b &#x3D; 1,&amp;\text{for y&#x3D;1}\ w^Tx + b &#x3D; -1, &amp;\text{for y&#x3D;-1}\end{cases}$$ 这两个平面分别表示类别y &#x3D; 1 和 -1时，离超平面最近的点所在的平面。式子统一转换为$y\cdot(w^T + b) &gt;&#x3D;1$如下图中的H1平面 H2平面：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-TWYNwOi1-1676187744960)(<a href="http://oe7d0gss7.bkt.clouddn.com/svn02.png?imageView2/3/w/350/h/200)%5D">http://oe7d0gss7.bkt.clouddn.com/svn02.png?imageView2/3/w/350/h/200)]</a><br><a href="http://blog.sina.com.cn/s/blog_4298002e010144k8.html">图片来源</a><br>我们要实现的目标是使得H1、H2到超平面的距离尽量远即：$Margin&#x3D;\frac{2}{||w||}$的最大值,于是就能构造出求解方程组：<br>        $$\begin{cases}\min||w||^2,&amp;\text{式(2)}\ st. y_i(w^Tx_i + b) -1 &gt;&#x3D;0 \end{cases}$$<br>这里的式（1）和式（2）为了方便计算可以统一写成$\min\frac{||w||^2}{2}$。</p><h3 id="拉格朗日方法"><a href="#拉格朗日方法" class="headerlink" title="拉格朗日方法"></a>拉格朗日方法</h3><p>为了求解我们的约束方程，需要引入拉格朗日函数，拉格朗日函数是用于求解多元函数在收到一个或多个约束条件时的极值问题的方法。使用拉格朗日函数可将一个n个变量和k个约束条件的最优化问题转换为n+k个变量的n+k个变量方程组。比如：要求$f(x,y)$ 在 $g(x,y)&#x3D;c$时的最大值时，我们可以引入新变量拉格朗日乘数$\alpha$,这是我们只需要下列拉格朗日函数的极值:<br>$$L(x,y,\alpha) &#x3D; f(x,y) + \alpha\cdot\left( g(x,y) -c \right)$$<br>拉格朗日乘法所得的极值会包含原问题的所有极值点，但并不保证每个极值点都是原问题的极值点。</p><p>使用拉格朗日方法求解我们的方程得到：<br>$$ L(w,b,\alpha) &#x3D; \min\frac{1}{2}\cdot||w||^2 - \sum_{i&#x3D;0}^n \alpha_i\left(y_i(w^Tx_i + b) - 1)\right) $$<br>要求解$L(w,b,\alpha)$的最小值并且使之等价于$\min||w||^2$， 又因为$y_i(w^Tx_i + b) &gt;&#x3D;1$，所有我们需要先求解$\max_{\alpha&gt;&#x3D;0}L(w,b,\alpha)$,因此原始方程解变成求解：<br>$$\min_{w,b},\max_{\alpha_i&gt;&#x3D;0} L(w,b,\alpha) &#x3D; \max_{\alpha_i&gt;&#x3D;0}\min_{w,b}L(w,b,\alpha)$$</p><p>我们先求$\min_{w,b}L(w,b,\alpha)$,先对w，b分别求偏导，令其等于0：$$\frac{d_L(w,b,\alpha)}{d_w} &#x3D; ||w|| - \sum_{i&#x3D;0}^n\alpha_iy_ix_i$$<br>$$\frac{d_L(w,b,\alpha)}{d_b} &#x3D; - \sum_{i&#x3D;0}^n\alpha_iy_i$$得到：$$||w|| &#x3D; \sum_{i&#x3D;0}^n\alpha_iy_ix_i,  ,,,,\sum_{i&#x3D;0}^n\alpha_iy_i &#x3D; 0$$带入$L$ 得：$$\begin{cases}L &#x3D; \sum_{i}^n\alpha_i - \frac{1}{2}\sum_{i,,j}^ny_iy_j\alpha_i\alpha_j&lt;x_i\cdot x_j&gt;,&amp;\text{式(2)}\ st. \alpha_i &gt;&#x3D;0,\ st.\sum_{i&#x3D;0}^n\alpha_iy_i &#x3D; 0 \end{cases}$$</p><p><code>推导公式可以参见 参考链接</code></p><h3 id="关于离群问题"><a href="#关于离群问题" class="headerlink" title="关于离群问题"></a>关于离群问题</h3><p>很多情况下给定的训练数据不是完全线性可分的，可能存在离群点，即y&#x3D;-1的点对应的特征值很接近超平面甚至超出了超平面进入到y&#x3D;1的类别中，这些点会影响超平面的移动甚至会导致超平面最终无解。我们引入了一个松弛变量$\xi$来表示点的偏移程度,目的是我们允许H1 和 H2之间存在数据点。<br>我们的超平面转变为：$subject ,,to ：y_i(w\cdot x_i - b - 1 + \xi) &gt;&#x3D; 0$ 并且 $\xi &gt;&#x3D;0$<br>最优值：$\min_{w,b,\xi}\frac{1}{2}w^Tw + C\sum_{i}\xi_i$<br>这里的C表示离群点对结果影响的权重值（当C&#x3D;$\infty$时退化到原来的理想线性可分场景）,对上面的公式采用之前的拉格朗日方法推导得到：<br>$$\begin{cases}L(w,b,\xi,\alpha,u) &#x3D; \frac{1}{2}w^Tw + C\sum_{i&#x3D;1}^n\xi_i - \sum_{i&#x3D;1}^n\alpha_i[y_i(w^Tx_i - b) + \xi_i -1] - \sum_{i&#x3D;1}^n u_i\xi_i\ st.\alpha_i(y_i(w^Tx_i -b) + \xi_i -1) &#x3D;0 \ st. u_i\xi_i &#x3D; 0\end{cases}$$</p><p>最终得到：$$\begin{cases}L &#x3D; \sum_{i}^n\alpha_i - \frac{1}{2}\sum_{i,,j}^ny_iy_j\alpha_i\alpha_j&lt;x_i\cdot x_j&gt;\ st. 0&lt;&#x3D; \alpha_i &lt;&#x3D;C\ st.\sum_{i&#x3D;0}^n\alpha_iy_i &#x3D; 0 \end{cases}$$</p><p>这里可以看到增加松弛变量和惩罚系数后我们的解表达式不变，只是$\alpha_i$ 的取值范围有原来的 $0&lt;&#x3D; \alpha_i &lt; \infty$变成了 $0&lt;&#x3D; \alpha_i &lt;&#x3D;C$</p><p>&#x3D;&#x3D;这里的推导详见底部的引用链接 smo.pdf 文档&#x3D;&#x3D;</p><h3 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h3><p>这里的目的是在代码实现前，先看一下算法的优化问题和回归问题。<br>超平面$w^Tx + b &#x3D; $,算法的最终目的是获取最优的$w^T 、b$,通过前面的推导公式 $w&#x3D;\sum_{i&#x3D;0}^n\alpha_iy_ix_i$ 可以转而得到 $w$因此我们的目标转而获取 $\alpha_i 、 b$, 在优化过程中我们每次选两个$\alpha_1 、\alpha_2$求最优化，然后再根据$\alpha_1、、alpha_2$优化我们的 $b$, 这里只写一下回归公式结果，具体推导过程都在&#x3D;&#x3D;参考的smo.pdf里面写的很详细&#x3D;&#x3D;。<br>$$\begin{cases} \eta &#x3D; - ||x_2 - x_1||^2 \<br>w &#x3D; \sum_{i&#x3D;1}^N\alpha_iy_ix_i \<br>E_2^{old} &#x3D; x_2^Tw_{old} + b_{old} - y_2 \ \alpha_2^{new} &#x3D; \alpha_2^{old} + \frac{y_2(E_2^{old}-E_1^{old})}{\eta} \ \alpha_1^{new} &#x3D; \alpha_1^{old} + y_1y_2\Delta\alpha_2\<br>\Delta b &#x3D; E(x,y)^{old} + \Delta \alpha_1y_1x_1^Tx + \Delta \alpha_2y_2x_2^Tx \end{cases}$$</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p><code>支持向量机的实现都是参见&lt;&lt;机器学习实战&gt;&gt;里面的代码。测试数据详见参考里的 svnTestSet.txt</code><br>简单版本的实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Created on Nov 4, 2010</span><br><span class="hljs-string">Chapter 5 source file for Machine Learing in Action</span><br><span class="hljs-string">@author: Peter</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadDataSet</span>(<span class="hljs-params">fileName</span>):<br>    dataMat = []; labelMat = []<br>    fr = <span class="hljs-built_in">open</span>(fileName)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fr.readlines():<br>        lineArr = line.strip().split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        dataMat.append([<span class="hljs-built_in">float</span>(lineArr[<span class="hljs-number">0</span>]), <span class="hljs-built_in">float</span>(lineArr[<span class="hljs-number">1</span>])])<br>        labelMat.append(<span class="hljs-built_in">float</span>(lineArr[<span class="hljs-number">2</span>]))<br>    <span class="hljs-keyword">return</span> dataMat,labelMat<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selectJrand</span>(<span class="hljs-params">i,m</span>):<br>    j=i <span class="hljs-comment">#we want to select any J not equal to i</span><br>    <span class="hljs-keyword">while</span> (j==i):<br>        j = <span class="hljs-built_in">int</span>(random.uniform(<span class="hljs-number">0</span>,m))<br>    <span class="hljs-keyword">return</span> j<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clipAlpha</span>(<span class="hljs-params">aj,H,L</span>):<br>    <span class="hljs-keyword">if</span> aj &gt; H:<br>        aj = H<br>    <span class="hljs-keyword">if</span> L &gt; aj:<br>        aj = L<br>    <span class="hljs-keyword">return</span> aj<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">smoSimple</span>(<span class="hljs-params">dataMatIn, classLabels, C, toler, maxIter</span>):<br>    dataMatrix = mat(dataMatIn); labelMat = mat(classLabels).transpose()<br>    b = <span class="hljs-number">0</span>; m,n = shape(dataMatrix)<br>    alphas = mat(zeros((m,<span class="hljs-number">1</span>)))<br>    <span class="hljs-built_in">iter</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">iter</span> &lt; maxIter):<br>        alphaPairsChanged = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-comment">#下面两行源自公式 aixiyi x + b - y &gt;= 0 使得点能够在H1 和 H2之外</span><br>            fXi = <span class="hljs-built_in">float</span>(multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[i,:].T)) + b<br>            Ei = fXi - <span class="hljs-built_in">float</span>(labelMat[i])<span class="hljs-comment">#if checks if an example violates KKT conditions</span><br>            <span class="hljs-comment">#判断是否在误差区间,如果超过误差区间则需要作调整</span><br>            <span class="hljs-keyword">if</span> ((labelMat[i]*Ei &lt; -toler) <span class="hljs-keyword">and</span> (alphas[i] &lt; C)) <span class="hljs-keyword">or</span> ((labelMat[i]*Ei &gt; toler) <span class="hljs-keyword">and</span> (alphas[i] &gt; <span class="hljs-number">0</span>)):<br>                j = selectJrand(i,m)<br>                fXj = <span class="hljs-built_in">float</span>(multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[j,:].T)) + b<br>                Ej = fXj - <span class="hljs-built_in">float</span>(labelMat[j])<br>                alphaIold = alphas[i].copy(); alphaJold = alphas[j].copy();<br>                <span class="hljs-comment">## Two Lagrange Multiplier 问题 smo.pdf 里面也有详细解释</span><br>                <span class="hljs-keyword">if</span> (labelMat[i] != labelMat[j]):<br>                    L = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, alphas[j] - alphas[i])<br>                    H = <span class="hljs-built_in">min</span>(C, C + alphas[j] - alphas[i])<br>                <span class="hljs-keyword">else</span>:<br>                    L = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, alphas[j] + alphas[i] - C)<br>                    H = <span class="hljs-built_in">min</span>(C, alphas[j] + alphas[i])<br>                <span class="hljs-keyword">if</span> L==H: <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;L==H&quot;</span>; <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment"># (x1 - x2)^2</span><br>                eta = <span class="hljs-number">2.0</span> * dataMatrix[i,:]*dataMatrix[j,:].T - dataMatrix[i,:]*dataMatrix[i,:].T - dataMatrix[j,:]*dataMatrix[j,:].T<br>                <span class="hljs-keyword">if</span> eta == <span class="hljs-number">0</span>: <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;eta&gt;=0&quot;</span>; <span class="hljs-keyword">continue</span><br>                alphas[j] -= labelMat[j]*(Ei - Ej)/eta<br>                alphas[j] = clipAlpha(alphas[j],H,L)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(alphas[j] - alphaJold) &lt; <span class="hljs-number">0.00001</span>): <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;j not moving enough&quot;</span>; <span class="hljs-keyword">continue</span><br>                alphas[i] += labelMat[j]*labelMat[i]*(alphaJold - alphas[j])<span class="hljs-comment">#update i by the same amount as j</span><br>                                                                         <span class="hljs-comment">#the update is in the oppostie direction</span><br>                b1 = b - Ei- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[i,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[i,:]*dataMatrix[j,:].T<br>                b2 = b - Ej- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[j,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[j,:]*dataMatrix[j,:].T<br>                <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; alphas[i]) <span class="hljs-keyword">and</span> (C &gt; alphas[i]): b = b1<br>                <span class="hljs-keyword">elif</span> (<span class="hljs-number">0</span> &lt; alphas[j]) <span class="hljs-keyword">and</span> (C &gt; alphas[j]): b = b2<br>                <span class="hljs-keyword">else</span>: b = (b1 + b2)/<span class="hljs-number">2.0</span><br>                alphaPairsChanged += <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iter: %d i:%d, pairs changed %d&quot;</span> % (<span class="hljs-built_in">iter</span>,i,alphaPairsChanged)<br>        <span class="hljs-keyword">if</span> (alphaPairsChanged == <span class="hljs-number">0</span>): <span class="hljs-built_in">iter</span> += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>: <span class="hljs-built_in">iter</span> = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iteration number: %d&quot;</span> % <span class="hljs-built_in">iter</span><br>    <span class="hljs-keyword">return</span> b,alphas<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcWs</span>(<span class="hljs-params">alphas,dataArr,classLabels</span>):<br>    X = mat(dataArr); labelMat = mat(classLabels).transpose()<br>    m,n = shape(X)<br>    w = zeros((n,<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        w += multiply(alphas[i]*labelMat[i],X[i,:].T)<br>    <span class="hljs-keyword">return</span> w<br>    <br>dataMat, labelMat = loadDataSet(<span class="hljs-string">&quot;svnTestSet.txt&quot;</span>)<br>b,result = smoSimple(dataMat, labelMat, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.001</span>, <span class="hljs-number">40</span>)<br><br>result:<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>matrix([[-<span class="hljs-number">3.73850318</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>alphas[alphas&gt;<span class="hljs-number">0</span>]<br>matrix([[ <span class="hljs-number">0.1516457</span> ,  <span class="hljs-number">0.14693547</span>,  <span class="hljs-number">0.06334441</span>,  <span class="hljs-number">0.00565379</span>,  <span class="hljs-number">0.35627179</span>]])<br><span class="hljs-comment">#这里可以看到，一共找到五个支持向量</span><br></code></pre></td></tr></table></figure><h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p>考虑如下分布图，在这种case下我们无法通过上面的松弛变量和惩罚参数来进行优化，这个时候我们就需要将这种无法区分的训练数据通过我们核函数(kernel函数)将数据转换为易于分类器理解的形式。通过核函数我们将我们特征数据从一个特征空间转换到另外一个特征空间，在新的空间下我们能很方便的利用smo算法对数据进行处理（另外一种理解是从低维度转换到高纬度）。<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CdlTH9UG-1676187744961)(<a href="http://oe7d0gss7.bkt.clouddn.com/svn_kernel.png?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/svn_kernel.png?imageView2/3/w/400/h/400)]</a></p><p>当一个不可分的低维数据通过Kernel转到到高维之后的视角：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cFZrj0FV-1676187744961)(<a href="http://oe7d0gss7.bkt.clouddn.com/svn_kernel02.gif?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/svn_kernel02.gif?imageView2/3/w/400/h/400)]</a><br>&#x3D;&#x3D;径向基核函数&#x3D;&#x3D;是目前使用最广泛的Kernel函数，当然还有其他类型的Kernel函数（也可以自己指定自己的核函数）例如：多项式核函数，线性核函数</p><p>###径向基核函数<br>径向基函数能够基于变量距离运算输出一个标量，这个距离可以是&lt;0,0&gt;向量与其他向量距离，径向基函数的高斯版本：<br>$$k(x,y) &#x3D; exp(\frac{-||x-y||^2}{2\sigma})$$<br>这个公式可以理解为将原始空间映射为无穷维空间。</p><p>核函数代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">kernelTrans</span>(<span class="hljs-params">X, A, kTup</span>): <span class="hljs-comment">#calc the kernel or transform data to a higher dimensional space</span><br>    m,n = shape(X)<br>    K = mat(zeros((m,<span class="hljs-number">1</span>)))<br>    <span class="hljs-keyword">if</span> kTup[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;lin&#x27;</span>: K = X * A.T   <span class="hljs-comment">#linear kernel</span><br>    <span class="hljs-keyword">elif</span> kTup[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;rbf&#x27;</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            deltaRow = X[j,:] - A<br>            K[j] = deltaRow*deltaRow.T<br>        K = exp(K/(-<span class="hljs-number">1</span>*kTup[<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)) <span class="hljs-comment">#divide in NumPy is element-wise not matrix like Matlab</span><br>    <span class="hljs-keyword">else</span>: <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&#x27;Houston We Have a Problem -- \</span><br><span class="hljs-string">    That Kernel is not recognized&#x27;</span>)<br>    <span class="hljs-keyword">return</span> K<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">optStruct</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,dataMatIn, classLabels, C, toler, kTup</span>):  <span class="hljs-comment"># Initialize the structure with the parameters</span><br>        self.X = dataMatIn<br>        self.labelMat = classLabels<br>        self.C = C<br>        self.tol = toler<br>        self.m = shape(dataMatIn)[<span class="hljs-number">0</span>]<br>        self.alphas = mat(zeros((self.m,<span class="hljs-number">1</span>)))<br>        self.b = <span class="hljs-number">0</span><br>        self.eCache = mat(zeros((self.m,<span class="hljs-number">2</span>))) <span class="hljs-comment">#first column is valid flag</span><br>        self.K = mat(zeros((self.m,self.m)))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.m):<br>            self.K[:,i] = kernelTrans(self.X, self.X[i,:], kTup)<br><br></code></pre></td></tr></table></figure><p>参考：<br><a href="http://blog.csdn.net/v_july_v/article/details/7624837">http://blog.csdn.net/v_july_v/article/details/7624837</a><br><a href="http://blog.pluskid.org/?p=685">http://blog.pluskid.org/?p=685</a><br><a href="http://blog.sina.com.cn/s/blog_4298002e010144k8.html">http://blog.sina.com.cn/s/blog_4298002e010144k8.html</a><br><a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E6%95%B0">https://zh.wikipedia.org/wiki/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E6%95%B0</a><br><a href="ftp://www.ai.mit.edu/pub/users/tlp/projects/svm/svm-smo/smo.pdf">ftp://www.ai.mit.edu/pub/users/tlp/projects/svm/svm-smo/smo.pdf</a> 或 <a href="http://oe7d0gss7.bkt.clouddn.com/smo.pdf">http://oe7d0gss7.bkt.clouddn.com/smo.pdf</a><br><a href="http://cs229.stanford.edu/notes/cs229-notes3.pdf">http://cs229.stanford.edu/notes/cs229-notes3.pdf</a><br><a href="http://oe7d0gss7.bkt.clouddn.com/svnTestSet.txt">http://oe7d0gss7.bkt.clouddn.com/svnTestSet.txt</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习06-AdaBoost(自适应增强算法)</title>
    <link href="/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A006-AdaBoost(%E8%87%AA%E9%80%82%E5%BA%94%E5%A2%9E%E5%BC%BA%E7%AE%97%E6%B3%95)/"/>
    <url>/2023/02/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A006-AdaBoost(%E8%87%AA%E9%80%82%E5%BA%94%E5%A2%9E%E5%BC%BA%E7%AE%97%E6%B3%95)/</url>
    
    <content type="html"><![CDATA[<h1 id="AdaBoost-自适应增强算法"><a href="#AdaBoost-自适应增强算法" class="headerlink" title="AdaBoost(自适应增强算法)"></a>AdaBoost(自适应增强算法)</h1><p>AdaBoost的目标是通过一个弱分类器构建一个强分类器，AdaBoost的大致运行过程：训练数据中的每一个样本，并赋予其一个权重，形成对应的权重向量$D$，一开始所有训练样本具有相同权值，然后使用弱分类器分类并计算出该分类器的错误率，然后再统一数据集上面再次训练弱分类器，在第二次训练中，将会调整每个样本的权值，其中第一次分队的样本的权重将会降低，第一次分错的样本权重将会提高。最终我们能得到一组分类器，通过，并且根据最终每个分类器的错误率为每个分类器赋予一个权重值$alpha$, $alpha$公式如下：<br>$$\alpha &#x3D; \frac{1}{2}ln(\frac{1-\epsilon}{\epsilon}),, 式（1）$$，当$alpha$得到后我们对权重向量$D$进行更新，使得正确分类的样本权值降低，错分样本权重升高，计算方法如下：如果某个样本被正确分类则权重值更改为：$$D_i^{(t+1)} &#x3D; \frac{D_i^{(t)}e^{-\alpha}}{Sum(D)} ,, 式（2）$$，如果某个样本被错分，那么样本的权重更改为：$$D_i^{(t+1)} &#x3D; \frac{D_i^{(t)}e^{\alpha}}{Sum(D)} ,,式（3）$$,通过不断的训练和调整权重产生新的分类器，知道训练错误率为0或者达到指定值为止。</p><h2 id="通过单层决策树构建弱分类器"><a href="#通过单层决策树构建弱分类器" class="headerlink" title="通过单层决策树构建弱分类器"></a>通过单层决策树构建弱分类器</h2><p>单层决策树是一种简单的决策树，不像之前的介绍的决策树，它只会做一层分裂，例如判断数值大于指定值时归类到class1,否则归类到class2。<br>构建一个简单的数据集：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dataMat = matrix(<span class="hljs-comment">[</span><br><span class="hljs-comment"><span class="hljs-comment">[1., 2.1]</span>,</span><br><span class="hljs-comment"><span class="hljs-comment">[2., 1.1]</span>,</span><br><span class="hljs-comment"><span class="hljs-comment">[1.3, 1.]</span>,</span><br><span class="hljs-comment"><span class="hljs-comment">[1., 1.]</span>,</span><br><span class="hljs-comment"><span class="hljs-comment">[2., 1.]</span></span><br><span class="hljs-comment">]</span>)<br>classLabels = <span class="hljs-comment">[1.0,1.0,-1.0,-1.0,1.0]</span><br></code></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aBhHP5YV-1676187774102)(<a href="http://oe7d0gss7.bkt.clouddn.com/adaboost.png?imageView2/3/w/400/h/400)%5D">http://oe7d0gss7.bkt.clouddn.com/adaboost.png?imageView2/3/w/400/h/400)]</a><br>AdaBoost需要构建多个单层决策树，多个决策树组合起来实现正确的对数据集进行分类。<br>单层决策树实现：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#dimen 表示特征下标</span><br><span class="hljs-comment">#threshVal 表示分隔值</span><br><span class="hljs-comment">#threshIneq 表示分隔方式</span><br><span class="hljs-attribute">def</span> stumpClassify(dataMat, dimen, threshVal, threshIneq):<br><span class="hljs-attribute">retArray</span> = ones((shape(dataMat)[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>))<br><span class="hljs-attribute">if</span> threshIneq == &#x27;lt&#x27;:<br><span class="hljs-attribute">for</span> i in shape(dataMat)[<span class="hljs-number">0</span>]:<br><span class="hljs-attribute">if</span> dataMat[i][dimen] &lt;= threshVal: retArray[i] = -<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">else</span>:<br><span class="hljs-attribute">for</span> i in shape(dataMat)[<span class="hljs-number">0</span>]:<br><span class="hljs-attribute">if</span> dataMat[i][dimen] &gt; threshVal: retArray[i] = -<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">return</span> retArray<br><br></code></pre></td></tr></table></figure><p>AdaBoost算法实现：<br>通过下面的方法可选择出在当前权重$D$下最佳的决策分类信息，返回值分别为当前最优分类器，当前分类器的误差值，最终的分类结果。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#这里的<span class="hljs-symbol">D</span>为每个样本的初始权重，计算方式为 <span class="hljs-symbol">D</span> = ones((shape(dataMat)[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>))/shape(dataMat)[<span class="hljs-number">0</span>]<br>def buildStump(dataMat, classLabels, <span class="hljs-symbol">D</span>):<br>dataMatrix = mat(dataMat);labelMatrix=mat(classLabels).<span class="hljs-symbol">T</span><br>m,n = shape(dataMatrix)<br>numSteps = <span class="hljs-number">10.0</span>; bestStump =&#123;&#125;;bestClassEst=mat(zeros((m,<span class="hljs-number">1</span>)))<br>minError = inf<br>#便利每个特征值<br>for i in range(n):<br>rangeMin = dataMatrix[:,i].min()<br>rangeMax = dataMatrix[:,i].max()<br>stepSize = (rangeMax - rangeMin) / numSteps<br>for j in range(<span class="hljs-number">-1</span>, int(numSteps) + <span class="hljs-number">1</span>):<br>for inequal in [<span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;gt&#x27;</span>]:<br>threshVal = (rangeMin + float(j) * stepSize)<br>predictValue = stumpClassify(dataMatrix, i, threshVal, inequal)<br>errArr = mat(ones((m,<span class="hljs-number">1</span>)))<br>for classIndex in range(<span class="hljs-number">0</span>,m):<br>if errArr[classIndex] == labelMatrix[classIndex]:<br>errArr[classIndex]=<span class="hljs-number">0</span><br>weightError = <span class="hljs-symbol">D</span>.<span class="hljs-symbol">T</span> * errArr<br>if weightError &lt; minError:<br>minError = weightError<br>bestClassEst = predictVals.copy()<br>bestStump[<span class="hljs-string">&#x27;dim&#x27;</span>] = i<br>bestStump[<span class="hljs-string">&#x27;thresh&#x27;</span>] = threshVal<br>bestStump[<span class="hljs-string">&#x27;ineq&#x27;</span>] = inequal<br>return bestStump, minError, bestClassEst<br><br><span class="hljs-symbol">Example</span> <span class="hljs-symbol">Result</span>:<br>&gt;&gt;&gt; bestStump<br>&#123;<span class="hljs-string">&#x27;dim&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;ineq&#x27;</span>: <span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;thresh&#x27;</span>: <span class="hljs-number">1.3</span>&#125;<br>&gt;&gt;&gt; minError<br>matrix([[ <span class="hljs-number">0.2</span>]])<br>&gt;&gt;&gt; bestClassEst<br>array([[<span class="hljs-number">-1.</span>],<br>       [ <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">-1.</span>],<br>       [<span class="hljs-number">-1.</span>],<br>       [ <span class="hljs-number">1.</span>]])<br></code></pre></td></tr></table></figure><p>完整AdaBost Training 算法实现：<br>算法输出结果为一组弱分类器，每个分类器都有对应的权重值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> adaBoostTrainDS(dataArr, classLables, numIt=<span class="hljs-number">40</span>):<br><span class="hljs-comment">#用于存储弱分类器组</span><br><span class="hljs-attribute">weakClassArr</span> =<span class="hljs-meta"> []</span><br><span class="hljs-attribute">m</span> = shape(dataArr)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#初始化训练数据权重值</span><br><span class="hljs-attribute">D</span> = mat(ones((m,<span class="hljs-number">1</span>))/m)<br><span class="hljs-attribute">aggClassEst</span> = mat(zeros((m,<span class="hljs-number">1</span>)))<br><br><span class="hljs-attribute">for</span> i in range(numIt):<br><span class="hljs-attribute">bestStump</span>, error, classEst = buildStump(dataArr, classLabels, D)<br><span class="hljs-comment">#计算alpha值</span><br><span class="hljs-attribute">alpha</span> = float(<span class="hljs-number">0</span>.<span class="hljs-number">5</span>*log((<span class="hljs-number">1</span>.<span class="hljs-number">0</span> - error)/max(error, <span class="hljs-number">1</span>e-<span class="hljs-number">16</span>)))<br><span class="hljs-attribute">bestStump</span>[&#x27;alpha&#x27;] = alpha<br><span class="hljs-attribute">weakClassArr</span>.append(bestStump)<br><span class="hljs-comment">#更新权重向量D,数学公式参见上面的</span><br><span class="hljs-comment">#得到的 expon为一个 (m,1)的向量</span><br><span class="hljs-attribute">expon</span> = multiply(-<span class="hljs-number">1</span>*alpha*mat(classLabel).T, classEst)<br><span class="hljs-comment">##利用上面的 公式(2) 公式（3）更新 D</span><br><span class="hljs-attribute">D</span> = multiply(D, exp(expon))<br><span class="hljs-attribute">D</span> = D/D.sum()<br><span class="hljs-attribute">aggClassEst</span> += alpha*classEst<br><span class="hljs-comment">##当前所有分类器组合得到的分类结果</span><br><span class="hljs-attribute">prediction</span> = sign(aggClassEst)<br><span class="hljs-comment">##计算误差值</span><br><span class="hljs-attribute">aggError</span> = ones((m,<span class="hljs-number">1</span>))<br><span class="hljs-attribute">for</span> i in range(prediction.shape()[<span class="hljs-number">0</span>]):<br><span class="hljs-attribute">if</span> prediction[i] == classLabels.T[i] :<br><span class="hljs-attribute">aggError</span>[i] = <span class="hljs-number">0</span><br><span class="hljs-comment"># 上面的for 循环可以简单用下面的语句</span><br><span class="hljs-comment">#aggErrors = multiply(sign(aggClassEst)!=mat(classLabels).T, ones((m,1)))</span><br><br><span class="hljs-comment">#计算错误率</span><br><span class="hljs-attribute">errorRate</span> = aggError.sum()/m<br><span class="hljs-attribute">if</span> errorRate == <span class="hljs-number">0</span>.<span class="hljs-number">0</span>: break;<br><br><span class="hljs-attribute">return</span> weakClassArr<br></code></pre></td></tr></table></figure><p>使用AdaBoost分类器进行分类目标数据</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">adaClassify</span>(dataToClass, classifierArr):<br>dataMatrix = <span class="hljs-built_in">mat</span>(dataToClass)<br>m = <span class="hljs-built_in">shape</span>(dataMatix)[<span class="hljs-number">0</span>]<br>##现将测试数据的分类结果初始为<span class="hljs-number">0</span><br>aggClassEst = <span class="hljs-built_in">mat</span>(<span class="hljs-built_in">zeros</span>((m,<span class="hljs-number">1</span>)))<br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(classifierArr)):<br>classEst = <span class="hljs-built_in">stumpClassify</span>(dataMatrix, classifierArr[i][<span class="hljs-string">&#x27;dim&#x27;</span>], classifierArr[i][<span class="hljs-string">&#x27;thresh&#x27;</span>], classifierArr[i][<span class="hljs-string">&#x27;ineq&#x27;</span>])<br>aggClassEst+= classifier[i][<span class="hljs-string">&#x27;alpha&#x27;</span>]*classEst<br><br><br>return <span class="hljs-built_in">sign</span>(aggClassEst)<br></code></pre></td></tr></table></figure><h2 id="AdaBoost-分类性能调优"><a href="#AdaBoost-分类性能调优" class="headerlink" title="AdaBoost 分类性能调优"></a>AdaBoost 分类性能调优</h2><p>不同弱分类数目会存在不同的分类错误率，但并不是说弱分类器的数量越多分类错误率越低，通常情况下，AdaBoost会达到一个稳定的测试错误率，而并不会随分类数目的增多而提高，另外一些情况下弱分类器数量当超过每一个最佳数值后，随着弱分类器数量的增加，错误率也会随之增高，这种现象称之为过拟合，因此在构造我们分类器时我们需要通过不断分类错误率和分类器数目找到一个最佳的分类器数。<br>这是一个分类器数目和错误率映射case：</p><table><thead><tr><th>分类器数目</th><th>训练错误率(%)</th><th>测试错误率(%)</th></tr></thead><tbody><tr><td>1</td><td>0.28</td><td>0.27</td></tr><tr><td>10</td><td>0.23</td><td>0.24</td></tr><tr><td>50</td><td>0.19</td><td>0.21</td></tr><tr><td>100</td><td>0.19</td><td>0.22</td></tr><tr><td>500</td><td>0.16</td><td>0.25</td></tr><tr><td>1000</td><td>0.14</td><td>0.31</td></tr><tr><td>10000</td><td>0.11</td><td>0.33</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序-归档</title>
    <link href="/2023/02/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/"/>
    <url>/2023/02/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择排序</span><br><span class="hljs-comment"> * Created by xueping.you on 15-8-5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ChooseSort &#123;<br>    private final static Logger logger = LoggerFactory.getLogger(ChooseSort.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> chooseSort(<span class="hljs-type">int</span> []unSortArray)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;unSortArray.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = unSortArray[i];<br>            <span class="hljs-type">int</span> smallestIndex = i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;unSortArray.length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(unSortArray[j]&lt;<span class="hljs-keyword">temp</span>)&#123;<br>                    smallestIndex=j;<br>                    <span class="hljs-keyword">temp</span>=unSortArray[j];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(smallestIndex!=i)&#123;<br>                unSortArray[smallestIndex]=unSortArray[i];<br>                unSortArray[i]=<span class="hljs-keyword">temp</span>;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String []args)&#123;<br>        <span class="hljs-type">int</span> [] <span class="hljs-keyword">array</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">31</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        logger.<span class="hljs-keyword">info</span>(&quot;before:&#123;&#125;&quot;, <span class="hljs-keyword">array</span>);<br>        chooseSort(<span class="hljs-keyword">array</span>);<br>        logger.<span class="hljs-keyword">info</span>(&quot;after:&#123;&#125;&quot;,<span class="hljs-keyword">array</span>);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>result:<br>19:28:00.208 [main] INFO  com.qyou.data.arithmetic.ChooseSort - before:[12, 10, 2, 45, 31, 56, 1, 9]<br>19:28:00.217 [main] INFO  com.qyou.data.arithmetic.ChooseSort - after:[1, 2, 9, 10, 12, 31, 45, 56]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shadowsocks-安装指南</title>
    <link href="/2023/02/12/shadowsocks-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    <url>/2023/02/12/shadowsocks-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="1-购买阿里云主机"><a href="#1-购买阿里云主机" class="headerlink" title="1.购买阿里云主机"></a>1.购买阿里云主机</h1><pre><code class="hljs">地区选择境外：香港配置可以都选择最低配需要公网ip</code></pre><h1 id="2-配置ssh登录主机"><a href="#2-配置ssh登录主机" class="headerlink" title="2.配置ssh登录主机"></a>2.配置ssh登录主机</h1><pre><code class="hljs">https://zhuanlan.zhihu.com/p/54643053https://blog.csdn.net/liujiakunit/article/details/45849095</code></pre><h1 id="3-环境安装"><a href="#3-环境安装" class="headerlink" title="3.环境安装"></a>3.环境安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">git:<br>yum install git<br><br>apt-get:<br>curl https://raw.githubusercontent.com/dvershinin/apt-get-centos/master/apt-get.sh -o /usr/local/bin/apt-get <br><br>python:<br>apt-get install python36<br><br>pip <br>apt-get install python3-pip<br><br>环境准备:<br>yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y<br><br>备注：上面执行ok如下可以不做<br>安装 pcre<br>yum install gcc-c++<br>wget    https://netix.dl.sourceforge.net/project/pcre/pcre/8.40/pcre-8.40.tar.gz<br>tar -zxvf   pcre-8.40.tar.gz<br>make  &amp;&amp; make install <br>https://www.jianshu.com/p/2eb60806af9e<br><br>安装 c-ares<br>yum install c-ares<br></code></pre></td></tr></table></figure><h1 id="4-安装Shadowsocks"><a href="#4-安装Shadowsocks" class="headerlink" title="4.安装Shadowsocks"></a>4.安装Shadowsocks</h1><h2 id="4-1-安装-shadowsocks"><a href="#4-1-安装-shadowsocks" class="headerlink" title="4.1.安装 shadowsocks"></a>4.1.安装 shadowsocks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install git+https://github.com/shadowsocks/shadowsocks.git@master<br>配置启动文件<br>&#123;<br> <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br><span class="hljs-string">&quot;local_port&quot;</span>:1080,<br><span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-string">&quot;xxxx&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>,<br> <span class="hljs-string">&quot;timeout&quot;</span>:300,<br><span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-gcm&quot;</span>,<br> <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;plugin&quot;</span>:<span class="hljs-string">&quot;obfs-server&quot;</span>,<br><span class="hljs-string">&quot;plugin_opts&quot;</span>:<span class="hljs-string">&quot;obfs-http&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-或者-shadowsocks-libev（推荐）"><a href="#4-2-或者-shadowsocks-libev（推荐）" class="headerlink" title="4.2.或者 shadowsocks-libev（推荐）"></a>4.2.或者 shadowsocks-libev（推荐）</h2><pre><code class="hljs">    参见（https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/）    </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/shadowsocks/shadowsocks-libev.git<br><span class="hljs-built_in">cd</span> shadowsocks-libev<br>git submodule update --init<br>./autogen.sh &amp;&amp; ./configure --disable-documentation &amp;&amp; make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-3配置"><a href="#4-3配置" class="headerlink" title="4.3配置"></a>4.3配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>配置文件：<br>sudo <span class="hljs-built_in">mkdir</span> /etc/shadowsocks-libev<br>sudo vi /etc/shadowsocks-libev/config.json <br>内容：<br>&#123;<br> <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br><span class="hljs-string">&quot;local_port&quot;</span>:1080,<br><span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-string">&quot;xxxx&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>,<br> <span class="hljs-string">&quot;timeout&quot;</span>:300,<br><span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-gcm&quot;</span>,<br> <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;plugin&quot;</span>:<span class="hljs-string">&quot;obfs-server&quot;</span>,<br><span class="hljs-string">&quot;plugin_opts&quot;</span>:<span class="hljs-string">&quot;obfs-http&quot;</span><br>&#125;<br><br>命令启动：<br>前端启动：ssserver -c /etc/shadowsocks.json；<br>后端启动：ssserver -c /etc/shadowsocks.json -d start；<br>停止：ssserver -c /etc/shadowsocks.json -d stop；<br><br>service启动：<br>创建Shadowsocks-libev.service配置文件<br>sudo vi /etc/systemd/system/shadowsocks.service<br>内容：<br>[Unit]<br>Description=Shadowsocks Server<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -u<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br><br>启动(可以通过systemctl status 查看)：<br>systemctl start shadowsocks<br></code></pre></td></tr></table></figure><p>备注：如果&#x2F;usr&#x2F;bin&#x2F;ss-server不存在可以尝试 ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ss-server &#x2F;usr&#x2F;bin</p><h2 id="4-4-启动obfs-server进程"><a href="#4-4-启动obfs-server进程" class="headerlink" title="4.4.启动obfs-server进程"></a>4.4.启动obfs-server进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">可以先手动启动Telnet验证端口看是否可以用：<br>obfs-server -s 0.0.0.0 -p bbbb --obfs http -r 127.0.0.1:xxxx<br><br>通过service方式启动：<br>创建<br>/etc/systemd/system/obfs-server.service<br>内容：<br>[Unit]<br>Description=obfs-server<br>Documentation=https://obfsf.org/en/<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=obfs-server -s 0.0.0.0 -p bbbb --obfs http -r 127.0.0.1:xxxx<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br><br>启动(可以通过systemctl status 查看)：<br>systemctl start  obfs-server<br><br></code></pre></td></tr></table></figure><p>备注：<br>        1.如果 &#x2F;user&#x2F;bin&#x2F;obfs-server不存在 可以尝试ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;obfs-server &#x2F;usr&#x2F;bin<br>        2.obfs-server 和 shadowsocks 的 ip 都配置为0.0.0.0</p><h1 id="5-阿里云主机配置shadowsocks-端口转发规则"><a href="#5-阿里云主机配置shadowsocks-端口转发规则" class="headerlink" title="5.阿里云主机配置shadowsocks 端口转发规则"></a>5.阿里云主机配置shadowsocks 端口转发规则</h1><pre><code class="hljs">涉及到的端口都配置一下转发规则</code></pre><h1 id="6-shadowsocks-client-配置"><a href="#6-shadowsocks-client-配置" class="headerlink" title="6.shadowsocks client 配置"></a>6.shadowsocks client 配置</h1><pre><code class="hljs">ip:阿里公网ipport:obfs 端口，如上的bbbbpassword:shadowsocks密码加密方法：shadowsocks对应插件：simple-obfs插件参数：obfs=http</code></pre><h1 id="7-相关网页"><a href="#7-相关网页" class="headerlink" title="7.相关网页"></a>7.相关网页</h1><p><a href="https://zhcexo.com/2018/08/16/how-to-install-simple-obfs/">https://zhcexo.com/2018/08/16/how-to-install-simple-obfs/</a><br><a href="https://www.zhanggaoyuan.com/article/4f7e349a.html">https://www.zhanggaoyuan.com/article/4f7e349a.html</a><br><a href="https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/">https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/</a><br><a href="https://www.meirenji.info/2019/03/19/%E5%AE%89%E8%A3%85-shadowsocks-libev%E5%90%AF%E7%94%A8-obfs-%E6%B7%B7%E6%B7%86/">https://www.meirenji.info/2019/03/19/%E5%AE%89%E8%A3%85-shadowsocks-libev%E5%90%AF%E7%94%A8-obfs-%E6%B7%B7%E6%B7%86/</a><br><a href="https://732200.xyz/blog/3.html">https://732200.xyz/blog/3.html</a><br><a href="https://github.com/shadowsocks/simple-obfs">https://github.com/shadowsocks/simple-obfs</a><br><a href="https://pdf-lib.org/Home/Details/2788">https://pdf-lib.org/Home/Details/2788</a> libsodium失败可以尝试这个方式<br><a href="https://blog.csdn.net/xukai871105/article/details/72795126">https://blog.csdn.net/xukai871105/article/details/72795126</a> mbedtls 安装失败可以尝试这个方法</p><h1 id="8-其他方法"><a href="#8-其他方法" class="headerlink" title="8.其他方法"></a>8.其他方法</h1><p>使用v2ray配置代理：<a href="https://zwc365.com/hide/shadowsocks-v2ray-plugin.html">https://zwc365.com/hide/shadowsocks-v2ray-plugin.html</a></p>]]></content>
    
    
    <categories>
      
      <category>机场网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shadowsocks</tag>
      
      <tag>翻墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码阅读-01</title>
    <link href="/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/"/>
    <url>/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-类装载器ClassLoader"><a href="#1-类装载器ClassLoader" class="headerlink" title="1.类装载器ClassLoader"></a>1.类装载器ClassLoader</h1><p>1.类加载器</p><blockquote><p>四种类装载器：根装载器（Bootstrap ClassLoader）、扩展装载器（Extention ClassLoader）应用程序装载器（Application ClassLoader）、自定义装载器（User ClassLoader）<br>JVM 装载类时使用 “全盘负责委托机制”</p></blockquote><p>跟加载器：</p><ul><li>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resources.jar、sun.boot.class.path 负责这些包下面的类，java、javax、sun开头的类（安全考虑）</li><li>没有父加载器</li><li>初始化Extention ClassLoader 和 Application ClassLoader</li></ul><p>扩展加载器：</p><ul><li>jre&#x2F;lib&#x2F;ext目录下加载类库</li></ul><p>应用加载器：</p><ul><li>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</li><li>应用默认加载器</li></ul><p>2.为什么需要自定义装载器？</p><ul><li>类不一定存放在已经设置好的classPath下(有系统类加载器AppClassLoader加载的路径)，对于自定义路中的class类文件的加载，我们需要自己的ClassLoader</li><li>有时我们不一定是从类文件中读取类，可能是从网络的输入流中读取类，这就需要做一些加密和解密操作，这需要自己实现加载类的逻辑，当然其他的特殊处理也同样适用。</li><li>可以定义类的实现机制，实现类的热部署,如OSGi中的bundle模块就是通过实现自己的ClassLoader实现的。</li></ul><p>3.类装载器转载类到JVM步骤</p><ol><li>装载：查找和导入class文件</li><li>链接：执行校验、准备和解析步骤，其中解析步骤是可以选择的<br>a)校验：检查载入Class文件数据的正确性<br>b)准备：给类的静态变量分配存储空间<br>c)解析：将符号引用转成直接应用</li><li>初始化：对类的静态变量，静态代码块执行初始化工作</li></ol><h1 id="2-资源访问接口"><a href="#2-资源访问接口" class="headerlink" title="2.资源访问接口"></a>2.资源访问接口</h1><p>Spring使用Resouce接口访问各种资源， 接口包括 exist()、isOpen()、getURL()、getFile()、getInputStream() 接口，实现接口包括：</p><ul><li>ByteArrayResource:二进制数据表示的资源</li><li>ClassPathResource:类路劲下的资源</li><li>FileSystemResource:文件系统</li><li>InputStreamResource:</li><li>UrlResource:</li><li>ServletContextResource:对应web应用根目录下的资源访问</li></ul><p>资源加载器：通过识别加载资源类型采用不同的资源访问接口进行加载；<br> ResourceLoader-&gt;ResourcePatternResolver-&gt;PathMatchingResourcePatternResolver</p><p>使用Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;classpath:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 因为`classpath:`只在本工程内查找，所以肯定找不到 spring.factories</span><br>        System.out.println(resource.exists()); <span class="hljs-comment">//false</span><br>        <span class="hljs-type">PathMatchingResourcePatternResolver</span> <span class="hljs-variable">resourcePatternResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>();<br>        Resource[] resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 它会去找所有的jar包的类路径开始查找，所以现在是可议找到多个的~~~</span><br>        System.out.println(resources.length); <span class="hljs-comment">//2</span><br>        System.out.println(Arrays.asList(resources));<br>        <span class="hljs-comment">//[URL [jar:file:/E:/repository/org/springframework/spring-beans/5.0.6.RELEASE/spring-beans-5.0.6.RELEASE.jar!/META-INF/spring.factories],</span><br>        <span class="hljs-comment">//URL [jar:file:/E:/repository/org/springframework/spring-test/5.0.6.RELEASE/spring-test-5.0.6.RELEASE.jar!/META-INF/spring.factories]]</span><br>        <span class="hljs-comment">// 还能使用Ant风格进行匹配~~~  太强大了：</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/*.factories&quot;</span>);<br>        System.out.println(resources); <span class="hljs-comment">// 能匹配上所有了路径下，`META-INF/*.factories`匹配上的所有文件</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:com/fsx/**/*.class&quot;</span>);<br>        System.out.println(resources.length); <span class="hljs-comment">//42 相当于把我当前项目所有的类都拿出来了</span><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="3-BeanFactory-和-ApplicationContext"><a href="#3-BeanFactory-和-ApplicationContext" class="headerlink" title="3.BeanFactory 和 ApplicationContext"></a>3.BeanFactory 和 ApplicationContext</h1><p>Spring通过配置文件描述Bean 及Bean之间的依赖关系，利用Java语言的反射功能实例化Bean 并建立Bean之间的依赖关系，Spring的IoC容器在完成这些底层功能基础上还提供了Bean实例缓存、生命周期管理、Bean实例代理、事件发布、资源装载等高级服务，BeanFactory是Spring最核心的接口，ApplicationContext建立在BeanFactory之上提供更多面向应用的功能；</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
