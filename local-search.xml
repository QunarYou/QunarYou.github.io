<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring源码阅读-01</title>
    <link href="/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/"/>
    <url>/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-类装载器ClassLoader"><a href="#1-类装载器ClassLoader" class="headerlink" title="1.类装载器ClassLoader"></a>1.类装载器ClassLoader</h1><p>1.类加载器</p><blockquote><p>四种类装载器：根装载器（Bootstrap ClassLoader）、扩展装载器（Extention ClassLoader）应用程序装载器（Application ClassLoader）、自定义装载器（User ClassLoader）<br>JVM 装载类时使用 “全盘负责委托机制”</p></blockquote><p>跟加载器：</p><ul><li>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resources.jar、sun.boot.class.path 负责这些包下面的类，java、javax、sun开头的类（安全考虑）</li><li>没有父加载器</li><li>初始化Extention ClassLoader 和 Application ClassLoader</li></ul><p>扩展加载器：</p><ul><li>jre&#x2F;lib&#x2F;ext目录下加载类库</li></ul><p>应用加载器：</p><ul><li>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</li><li>应用默认加载器</li></ul><p>2.为什么需要自定义装载器？</p><ul><li>类不一定存放在已经设置好的classPath下(有系统类加载器AppClassLoader加载的路径)，对于自定义路中的class类文件的加载，我们需要自己的ClassLoader</li><li>有时我们不一定是从类文件中读取类，可能是从网络的输入流中读取类，这就需要做一些加密和解密操作，这需要自己实现加载类的逻辑，当然其他的特殊处理也同样适用。</li><li>可以定义类的实现机制，实现类的热部署,如OSGi中的bundle模块就是通过实现自己的ClassLoader实现的。</li></ul><p>3.类装载器转载类到JVM步骤</p><ol><li>装载：查找和导入class文件</li><li>链接：执行校验、准备和解析步骤，其中解析步骤是可以选择的<br>a)校验：检查载入Class文件数据的正确性<br>b)准备：给类的静态变量分配存储空间<br>c)解析：将符号引用转成直接应用</li><li>初始化：对类的静态变量，静态代码块执行初始化工作</li></ol><h1 id="2-资源访问接口"><a href="#2-资源访问接口" class="headerlink" title="2.资源访问接口"></a>2.资源访问接口</h1><p>Spring使用Resouce接口访问各种资源， 接口包括 exist()、isOpen()、getURL()、getFile()、getInputStream() 接口，实现接口包括：</p><ul><li>ByteArrayResource:二进制数据表示的资源</li><li>ClassPathResource:类路劲下的资源</li><li>FileSystemResource:文件系统</li><li>InputStreamResource:</li><li>UrlResource:</li><li>ServletContextResource:对应web应用根目录下的资源访问</li></ul><p>资源加载器：通过识别加载资源类型采用不同的资源访问接口进行加载；<br> ResourceLoader-&gt;ResourcePatternResolver-&gt;PathMatchingResourcePatternResolver</p><p>使用Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;classpath:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 因为`classpath:`只在本工程内查找，所以肯定找不到 spring.factories</span><br>        System.out.println(resource.exists()); <span class="hljs-comment">//false</span><br>        <span class="hljs-type">PathMatchingResourcePatternResolver</span> <span class="hljs-variable">resourcePatternResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>();<br>        Resource[] resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 它会去找所有的jar包的类路径开始查找，所以现在是可议找到多个的~~~</span><br>        System.out.println(resources.length); <span class="hljs-comment">//2</span><br>        System.out.println(Arrays.asList(resources));<br>        <span class="hljs-comment">//[URL [jar:file:/E:/repository/org/springframework/spring-beans/5.0.6.RELEASE/spring-beans-5.0.6.RELEASE.jar!/META-INF/spring.factories],</span><br>        <span class="hljs-comment">//URL [jar:file:/E:/repository/org/springframework/spring-test/5.0.6.RELEASE/spring-test-5.0.6.RELEASE.jar!/META-INF/spring.factories]]</span><br>        <span class="hljs-comment">// 还能使用Ant风格进行匹配~~~  太强大了：</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/*.factories&quot;</span>);<br>        System.out.println(resources); <span class="hljs-comment">// 能匹配上所有了路径下，`META-INF/*.factories`匹配上的所有文件</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:com/fsx/**/*.class&quot;</span>);<br>        System.out.println(resources.length); <span class="hljs-comment">//42 相当于把我当前项目所有的类都拿出来了</span><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="3-BeanFactory-和-ApplicationContext"><a href="#3-BeanFactory-和-ApplicationContext" class="headerlink" title="3.BeanFactory 和 ApplicationContext"></a>3.BeanFactory 和 ApplicationContext</h1><p>Spring通过配置文件描述Bean 及Bean之间的依赖关系，利用Java语言的反射功能实例化Bean 并建立Bean之间的依赖关系，Spring的IoC容器在完成这些底层功能基础上还提供了Bean实例缓存、生命周期管理、Bean实例代理、事件发布、资源装载等高级服务，BeanFactory是Spring最核心的接口，ApplicationContext建立在BeanFactory之上提供更多面向应用的功能；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
