<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell查询数据库和发送邮件</title>
    <link href="/2023/02/12/Shell%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2023/02/12/Shell%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>##脚本归档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs bash">sendmail.sh<br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#################################################################</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getDateStr</span></span>()<br>&#123;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-<span class="hljs-variable">$1</span> day&quot;</span> +%Y-%m-%d`<br>&#125;<br><br><span class="hljs-comment">#定义配置文件的地址</span><br>PROPERTY_FILE=<span class="hljs-string">&quot;~/conf/conf.properties&quot;</span><br><span class="hljs-comment">#数据库</span><br>db_name=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.host&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#用户名</span><br>db_username=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.username&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#密码</span><br>db_password=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.password&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#数据库</span><br>db=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;mysql.database&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#对账天数</span><br>max_day=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;size_day&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#存放对账总结果存放文件</span><br>reconcile_result=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;reconcile_result&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#存放对账详情存放文件 biz_type_diff_ + 1 “酒店直销TTS” 2 “酒店OTATTS” 3 “酒店国际业务” 4 “酒店一口价分销”</span><br>reconcile_diff_result=<span class="hljs-string">&#x27;~/out/biztypediff_&#x27;</span><br><span class="hljs-comment">#查询出来的邮件发送人</span><br>sendEmail=`sudo <span class="hljs-built_in">cat</span> <span class="hljs-variable">$PROPERTY_FILE</span> | grep <span class="hljs-string">&quot;sendEmail&quot;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-comment">#定义查询一句</span><br><br>date_str=`getDateStr <span class="hljs-string">&quot;<span class="hljs-variable">$max_day</span>&quot;</span>`<br><span class="hljs-comment">#构建查询语句</span><br>select_reconcileResult=<span class="hljs-string">&quot;select * from reconcile_result where reconcile_ts &lt; &#x27;<span class="hljs-variable">$&#123;date_str&#125;</span> 00:00:00&#x27;;&quot;</span><br><span class="hljs-comment">#执行查询语句</span><br>mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$select_reconcileResult</span>&quot;</span> &gt; <span class="hljs-variable">$reconcile_result</span><br><br><span class="hljs-comment">#$1为邮件发送人列表,$2为biztype</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">sendmail</span></span>()<br>&#123;<br><span class="hljs-keyword">if</span> [ -s $reconcile_diff_result<span class="hljs-variable">$2</span> ]<br><span class="hljs-keyword">then</span><br>        from=alert@xxx.com<br>        <span class="hljs-comment">#to=`cat $1`</span><br>        to=<span class="hljs-string">&quot;xxx.xx@xxx.com&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;table border=1&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        title=`<span class="hljs-built_in">cat</span> ~/conf/emailformat|grep <span class="hljs-string">&#x27;email_title&#x27;</span> | awk -F <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> `<br>        <span class="hljs-comment">#分割字符串，变量OLD_IFS存着默认分隔符，IFS存着分隔符，用完之后还原分隔符</span><br>        OLD_IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>        IFS=<span class="hljs-string">&quot; &quot;</span><br>        arr=(<span class="hljs-variable">$title</span>)<br>        IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$OLD_IFS</span>&quot;</span><br>        <span class="hljs-keyword">for</span> titles <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;arr[@]&#125;</span><br>        <span class="hljs-keyword">do</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&quot;</span><span class="hljs-variable">$titles</span><span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-built_in">cat</span> $reconcile_diff_result<span class="hljs-variable">$2</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> diff_line<br>        <span class="hljs-keyword">do</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>&gt;&gt;mailcontent<br>                OLD_IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>                IFS=<span class="hljs-string">&quot; &quot;</span><br>                diff_line_arr=(<span class="hljs-variable">$diff_line</span>)<br>                IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$OLD_IFS</span>&quot;</span><br>                <span class="hljs-keyword">for</span> diff_item <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;diff_line_arr[@]&#125;</span><br>                <span class="hljs-keyword">do</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&quot;</span><span class="hljs-variable">$diff_item</span><span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>&gt;&gt;mailcontent<br>                <span class="hljs-keyword">done</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>&gt;&gt;mailcontent<br>        <span class="hljs-comment">#具体邮件发送代码</span><br><br>        <span class="hljs-comment">#设置邮件发送日期</span><br>        email_date=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d_%H:%M:%S&quot;</span>)<br>        <span class="hljs-comment">#设置邮件标题</span><br>        email_subject=<span class="hljs-string">&quot;对账差异未处理提醒&quot;</span><span class="hljs-variable">$email_date</span><br>        <span class="hljs-comment">#发送邮件</span><br>        (<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Subject: <span class="hljs-variable">$email_subject</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;From: <span class="hljs-variable">$from</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;To: <span class="hljs-variable">$to</span>&quot;</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-Type: text/html&quot;</span> ;<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> mailcontent`;)|/usr/lib/sendmail -t<br><span class="hljs-keyword">fi</span><br>sudo <span class="hljs-built_in">rm</span> mailcontent<br>&#125;<br><br><span class="hljs-comment">#查询出对账总结过对应的差异</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br><span class="hljs-keyword">do</span><br>        reconcile_id=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>        biztype=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>        mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;select id , trade_no , order_no,reconcile_ts ,reconcile_op_type , reconcile_direct , trade_amount , biz_type , status from reconcile_diff_detail where reconcile_result_id = &#x27;<span class="hljs-variable">$reconcile_id</span>&#x27; and invalid=0;&quot;</span>&gt;&gt;$reconcile_diff_result<span class="hljs-variable">$biztype</span><br>        <span class="hljs-comment">#查询邮件</span><br>        mysql -s -h <span class="hljs-variable">$db_name</span> -u<span class="hljs-variable">$db_username</span> -p<span class="hljs-variable">$db_password</span> <span class="hljs-variable">$db</span> -e <span class="hljs-string">&quot;select biz_type,email_address from reconcile_notify_email;&quot;</span>&gt;<span class="hljs-variable">$sendEmail</span><br><span class="hljs-keyword">done</span>&lt;<span class="hljs-variable">$reconcile_result</span><br><br><span class="hljs-comment">#发送邮件的代码</span><br><span class="hljs-built_in">ls</span> /home/xueping.you/out/biztypediff_*&gt;outfile<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br><span class="hljs-keyword">do</span><br>        biztype=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span> | grep <span class="hljs-string">&#x27;biztypediff&#x27;</span> | awk -F <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>        <span class="hljs-comment">#生成邮件接收人地址的字符串</span><br>        emailTo=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-built_in">cat</span> <span class="hljs-variable">$sendEmail</span>|grep <span class="hljs-variable">$biztype</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$line</span><span class="hljs-string">&quot;;&quot;</span>;<span class="hljs-keyword">done</span> &gt; readysend<br>        sendmail <span class="hljs-string">&quot;readysend&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$biztype</span>&quot;</span><br><br><span class="hljs-keyword">done</span>&lt;outfile<br>sudo <span class="hljs-built_in">rm</span> outfile<br>sudo <span class="hljs-built_in">rm</span> /home/xueping.you/out/*<br>sudo <span class="hljs-built_in">rm</span> readysend<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql何登成文章笔记</title>
    <link href="/2023/02/12/Mysql%E4%BD%95%E7%99%BB%E6%88%90%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/12/Mysql%E4%BD%95%E7%99%BB%E6%88%90%E6%96%87%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>#Mysql名词解释&#x2F;含义&#x2F;读书笔记</p><p>##MVCC(Multiversion concurrency control)</p><blockquote><p>MySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——MVCC (Multi-Version Concurrency Control) (注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。</p><p>在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p></blockquote><p>###快照读</p><blockquote><p>简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)<br>select * from table where ?;</p></blockquote><p>###当前读</p><blockquote><p>当前读：特殊的读操作，插入&#x2F;更新&#x2F;删除操作，属于当前读，需要加锁。<br><code>select * from table where ? lock in share mode;</code> S锁<br>select * from table where ? for update; X锁<br>insert into table values (…);X锁<br>update table set ? where ?;X锁<br>delete from table where ?;X锁</p></blockquote><p>##clustered index </p><blockquote><p>官方文档：<br>Every InnoDB table has a special index called the clustered index where the data for the rows is stored. Typically, the clustered index is synonymous with the primary key. To get the best performance from queries, inserts, and other database operations, you must understand how InnoDB uses the clustered index to optimize the most common lookup and <code>DML</code> operations for each table.</p><ul><li><p>If you define a <code>PRIMARY KEY</code> on your table, InnoDB uses it as the clustered index.(如果定义的主键，那么InnoDB会选择主键作为聚簇索引。)</p></li><li><p>If you do not define a <code>PRIMARY KEY</code> for your table, MySQL picks the first <code>UNIQUE</code> index that has only <code>NOT NULL</code> columns as the primary key and <code>InnoDB</code> uses it as the clustered index.(如果不存在主键，那么Mysql会选择一个唯一建并且唯一建列为Not Null作为InnoDB索引。)</p></li><li><p>If the table has no <code>PRIMARY KEY</code> or suitable <code>UNIQUE</code> index, <code>InnoDB</code> internally generates a hidden clustered index on a synthetic column containing row <code>ID</code> values. The rows are ordered by the <code>ID</code> that <code>InnoDB</code> assigns to the rows in such a table. The row <code>ID</code> is a 6-byte field that increases monotonically as new rows are inserted. Thus, the rows ordered by the row <code>ID</code> are physically in insertion order.(如果表主键和唯一建都不存在，那么InnoDB内部会生成一个隐藏的包含了列号值，并且作为聚簇索引。)</p></li></ul></blockquote><p>##2PL—Two-Phase Locking：二阶段锁</p><blockquote><p>在数据库和会话程序中，使用2PL来保证线程安全，即获取锁与释放锁。2PL有两个原语：</p><p>-Expanding phase : locks are acquired and no locks are released;<br>-Shrinking phase : locks are released and no locks are acquired;<br>2PL定于区分了两种锁，Shared locks 和 Exclusive locks。</p><p>参见:<a href="https://en.wikipedia.org/wiki/Two-phase_locking">Two-phase locking</a></p></blockquote><p>##Mysql 事务隔离级别：Isolation level</p><blockquote><p>在database systems中，isolations 决定事务对于其他用户和系统的可见性吗，PS：ACID（Atomicty,Consistency, Isolation, Durability）。<br>###事务操作中出现的一些名词<br>####幻读<br>在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几行(Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几行数据是它先前所没有的。<br>####脏读<br>某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的，原因是事务能看到别的事务的未提交的结果。<br>####不可重复读<br>在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据，原因是事务可以看到别的事务提交的结果。</p></blockquote><p>###四中隔离级别<br>####Serializable</p><blockquote><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p></blockquote><p>####Repeatable reads</p><blockquote><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题，GAP锁。</p></blockquote><p>####Read committed</p><blockquote><p> 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。<br>####Read uncommitted<br>   在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p></blockquote><p>####分析一条Sql的加锁情况，参见<a href="http://hedengcheng.com/?p=771">何登成</a>博文</p><ul><li>Sql: select * from t1 where id&#x3D;10;</li><li>Sql: delete  from t1 where id&#x3D;10;<br>在回答这个问题之前我们需要明确几个前提条件：</li><li>前提一：id列是不是主键</li><li>当前数据库引擎的隔离级别是什么</li><li>Id列不是主键，那么Id列上面有无索引</li><li>Id列上面如果有二阶索引，那么Id是否是Unique Key</li><li>两个Sql的执行计划是什么？索引扫描？全表扫描？<br>另外一个Sql即便通过分析结论会使用索引，但实际执行计划有很多复杂的其他条件，即便”看上去“会走索引但是最终通过执行计划看却走了全表扫描。</li></ul><p>#####组合一：id列是主键，RC隔离级别，执行delete from t1 where id &#x3D; 10;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，<br><span class="hljs-keyword">primary key</span>(id)<br>);<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：如果id列是主键，这种情况只需要在id&#x3D;10的列上加上X锁。</p><p>#####组合二：id是Unique_key , RC隔离级别，执行delete from t1 where id&#x3D;10;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br><span class="hljs-keyword">unique</span> key `key_name`(`<span class="hljs-type">name</span>`)<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804130343440" alt="这里写图片描述"><br>这种组合下面id是二阶段索引，这种情况下和组合一加锁不同，DB引擎先走where条件的Id索引，在对应Id索引上id&#x3D;10的记录上加X锁，然后根据name值回到聚簇索引上面，并对name&#x3D;d的值加X锁。为什么聚簇索引上面也需要加X锁，如果不加X锁在delete执行的同事如果一个update t1 set id&#x3D;100 where name&#x3D;’d’;就会有冲突。<br><strong>结论</strong>：如果id是唯一索引，name为主键，那么会在id索引上面id&#x3D;10的记录上加X锁，并且name聚簇索引上name&#x3D;’d’的记录上加X锁。</p><p>#####组合三：id为非唯一索引，RC隔离级别delete from t1 where id&#x3D;10;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br>key `key_name`(`<span class="hljs-type">name</span>`)<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804130330558" alt="这里写图片描述"><br>从图可知，在where条件匹配到的id&#x3D;10的所有记录均会加上X锁，并且对应到索引上的记录也都会加锁。<br><strong>结论</strong>：若id列上有非唯一索引，那么对应的所有满足SQL查询条件的记录，都会被加锁。同时，这些记录在主键索引上的记录，也会被加锁。</p><p>#####组合四：id列上无索引，RC隔离级别delete from t1 where id&#x3D;10;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">primary key</span> (`<span class="hljs-type">name</span>`),<br>);<br></code></pre></td></tr></table></figure><p>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804130311363" alt="这里写图片描述"><br><strong>结论</strong>：mysql在走where条件的时候由于无法快速通过索引确认影响行，因此会对所有聚簇索引的记录行加上X锁然后返回所有记录。在具体实现时Mysql做了优化，再次通过where条件判断，对于不满足的记录通过unlock_row将X锁进行释放(违背了2PL规范);</p><p>#####组合五：id为主键列，RR隔离级别<br><strong>这种情况下加锁机制同组合一一致。</strong></p><p>#####组合六：id列为唯一索引，RR隔离级别<br><strong>这种情况下加锁同组合二一致</strong></p><p>#####组合七：id列为非唯一索引，RR隔离级别 （GAP锁）<br>由于Mysql事务离别为RC的情况下是允许幻读的，但是隔离级别在RR的情况下是不运行幻读。Mysql是如何做到RR隔离级别不产生幻读？这个组合中会加以说明。<br>执行图(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804132704791" alt="这里写图片描述"><br>这里的加锁机制和RC下面的加锁机制相似，唯一区别的是就是RC的加锁情况下增加了一个GAP锁,并且GAP锁不是加到具体的记录上的，而是加载到记录与记录之间的一把锁。<br>先说说幻读：幻读的意思是说当连续两次执行一个select * from t1 where id&#x3D;10 for update Sql的时候，前后两次读取的记录数不一致（第二次不会返回比第一次更多的记录数）。<br>RR隔离级别下，由于B+树索引是有序的，那么需要保证的是在id&#x3D;[6,10)之间不能插入id&#x3D;10的记录，详细就是在[6,c]与[10,b]之间插入类似[10,aa]或者在[10,b]与[10,d]之间插入[10,c]时都需要有一把锁来使得这些插入不能执行（即：GAP锁）。</p><p>GAP锁之所以在组合五和组合六中不会出现的原因是因为上面两种组合保证了记录的唯一性，也就没有必要使用GAP锁。</p><p><strong>结论</strong>：Repeatable Read隔离级别下，id列上有一个非唯一索引，对应SQL：delete from t1 where id &#x3D; 10; 首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，加GAP上的GAP锁，然后加主键聚簇索引上的记录X锁，然后返回；然后读取下一条，重复进行。直至进行到第一条不满足条件的记录[11,f]，此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。</p><p>#####组合八：id上无索引，RR事务隔离级别<br>加锁情况(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804134326035" alt="这里写图片描述"><br><strong>结论</strong>：加锁机制和RC隔离级别下类似，区别是同事为每个记录之间增加了一个GAP锁。任何更新&#x2F;修改&#x2F;插入等涉及到加锁的Sql语句都无法执行。欣喜的是同组合四类似，Mysql会提前过滤where条件为不满足条件的提前释放锁。</p><p>#####组合九：Serializable<br>Serializable情况下，delete from t1 where id&#x3D;10 通RR情况下一样会通过Gap锁解决掉幻读情况。Serializable影响的是在select * from t1 where id&#x3D;10 ,这条Sql在RR 和 RC下面都是快照度不加锁，但是在Serializable情况下会加锁。</p><p>####一条复杂Sql的分析<br>Sql用例如下(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>)：<br><img src="https://img-blog.csdn.net/20150804135959531" alt="这里写图片描述"></p><p>在分析出SQL where条件的构成之后，再来看看这条SQL的加锁情况 (RR隔离级别)，如下图所示：<br><img src="https://img-blog.csdn.net/20150804140412382" alt="这里写图片描述"><br>从图中可以看出，在Repeatable Read隔离级别下，由Index Key所确定的范围，被加上了GAP锁；Index Filter锁给定的条件 (userid &#x3D; ‘hdc’)何时过滤，视MySQL的版本而定，在MySQL 5.6版本之前，不支持Index Condition Pushdown(ICP)，因此Index Filter在MySQL Server层过滤，在5.6后支持了Index Condition Pushdown，则在index上过滤。若不支持ICP，不满足Index Filter的记录，也需要加上记录X锁，若支持ICP，则不满足Index Filter的记录，无需加记录X锁 (图中，用红色箭头标出的X锁，是否要加，视是否支持ICP而定)；而Table Filter对应的过滤条件，则在聚簇索引中读取后，在MySQL Server层面过滤，因此聚簇索引上也需要X锁。最后，选取出了一条满足条件的记录[8,hdc,d,5,good]，但是加锁的数量，要远远大于满足条件的记录数量。</p><p><strong>结论</strong>：在Repeatable Read隔离级别下，针对一个复杂的SQL，首先需要提取其where条件。Index Key确定的范围，需要加上GAP锁；Index Filter过滤条件，视MySQL版本是否支持ICP，若支持ICP，则不满足Index Filter的记录，不加X锁，否则需要X锁；Table Filter过滤条件，无论是否满足，都需要加X锁。</p><p>####死锁的原理和分析<br>死锁的情况1(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150804140841923" alt="这里写图片描述"><br>死锁情况2(<a href="http://hedengcheng.com/?p=771">何登成博客获取</a>):<br><img src="https://img-blog.csdn.net/20150825001409900" alt="这里写图片描述"><br>上面的两个死锁用例。第一个非常好理解，也是最常见的死锁，每个事务执行两条SQL，分别持有了一把锁，然后加另一把锁，产生死锁。</p><p>第二个用例，虽然每个Session都只有一条语句，仍旧会产生死锁。要分析这个死锁，首先必须用到本文前面提到的MySQL加锁的规则。针对Session 1，从name索引出发，读到的[hdc, 1]，[hdc, 6]均满足条件，不仅会加name索引上的记录X锁，而且会加聚簇索引上的记录X锁，加锁顺序为先[1,hdc,100]，后[6,hdc,10]。而Session 2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。发现没有，跟Session 1的加锁顺序正好相反，如果两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。</p><p>#参见文档<br><a href="http://hedengcheng.com/?p=771">何登成文章：http://hedengcheng.com/?p=771</a><br><a href="http://dev.mysql.com/doc/">mysql文档：http://dev.mysql.com/doc/</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux远程文件传输命令</title>
    <link href="/2023/02/12/linux%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/02/12/linux%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-copy-file-to-local-system"><a href="#How-to-copy-file-to-local-system" class="headerlink" title="How to copy file to local system?"></a>How to copy file to local system?</h1><p>##Use nc(NetCat) Command （Not Security）<br><strong>Server side</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cat backup.iso <span class="hljs-string">| pv -b &gt; nc -l 3333</span><br></code></pre></td></tr></table></figure><p><strong>Client side</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">192.168.0.1</span> <span class="hljs-number">3333</span> | pv -b &gt; backunp.iso<br></code></pre></td></tr></table></figure><p><strong>ps: nc also can use for port scanning</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">#It may <span class="hljs-keyword">be</span> useful <span class="hljs-keyword">to</span> know which ports are <span class="hljs-keyword">open</span> <span class="hljs-built_in">and</span> running services <span class="hljs-keyword">on</span> <span class="hljs-keyword">a</span> target machine. the -<span class="hljs-keyword">z</span> flag can <span class="hljs-keyword">be</span> used <span class="hljs-keyword">to</span> tell nc <span class="hljs-keyword">to</span> report <span class="hljs-keyword">open</span> ports,ranther than initiate <span class="hljs-keyword">a</span> connection.<br><br>nc -zv host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">80</span> <span class="hljs-number">20</span> <span class="hljs-number">22</span><br><br>&gt;nc: connect <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">80</span> (tcp) failed: Connection refused<br>&gt;nc: connect <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">20</span> (tcp) failed: Connection refused<br>&gt;Connection <span class="hljs-keyword">to</span> host.example.<span class="hljs-keyword">com</span> port [tcp/ssh] succeeded!<br><br>#nc also <span class="hljs-keyword">be</span> useful <span class="hljs-keyword">to</span> know which server software <span class="hljs-keyword">is</span> running<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;QUIT&#x27;</span> | nc host.example.<span class="hljs-keyword">com</span> <span class="hljs-number">20</span>-<span class="hljs-number">30</span><br><br>&gt;SSH-<span class="hljs-number">1.99</span>-OpenSSH_3.<span class="hljs-number">6.1</span>p2 Protocol mismatch.<br>&gt;<span class="hljs-number">220</span> host.example.<span class="hljs-keyword">com</span> IMS SMTP Receiver Version <span class="hljs-number">0.84</span> Ready<br><br></code></pre></td></tr></table></figure><p>##Use scp Command<br><strong>Copy your file to target marchine</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">scp <span class="hljs-keyword">file</span>.foo user@<span class="hljs-keyword">target</span>.com:<span class="hljs-keyword">file</span>.foo<br></code></pre></td></tr></table></figure><p><strong>Copy target marchine’s file to local</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">scp user@<span class="hljs-keyword">target</span>.com:<span class="hljs-keyword">file</span>.foo <span class="hljs-keyword">file</span>.foo<br></code></pre></td></tr></table></figure><p>##Use ssh Command<br><strong>To remote host</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> localfile.<span class="hljs-keyword">conf</span> | ssh user@hostname &#x27;<span class="hljs-keyword">cat</span> -&gt; /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span>&#x27;<br></code></pre></td></tr></table></figure><p><strong>From remote host</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">ssh user@hostname &#x27;<span class="hljs-keyword">cat</span> /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span>&#x27; &gt; /tmp/<span class="hljs-keyword">file</span>.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>##Use sftp Command<br><strong>same as ftp command</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sftp</span> username<span class="hljs-variable">@remote_hostname_or_IP</span><br></code></pre></td></tr></table></figure><p>##Use sshsf Mount Remote File System Over SSH<br><code>scp sftp nc allow us to copy files easily and securely between these accounts, But, what if we don&#39;t want to copy the files to our local system before using them? Normally, this would be a good place for traditional network filesystem, Unfortunately, setting up these network filesystems requires administrator access on both systems. Luckily, as long as you have SSH access, you can use SSHFS to mount and use remote directory trees as if they were local.</code><br><strong>Install sshfs</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install sshfs<br></code></pre></td></tr></table></figure><p><strong>Mounting the remote file system</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HOME</span><br>sudo mkdir <span class="hljs-regexp">/mnt/</span>droplte &lt; -- replace <span class="hljs-string">&#x27;droplet&#x27;</span> whatever you prefer<br>sudo sshfs -o allow_other, defer_permissions root@remotehost:<span class="hljs-regexp">/ /m</span>nt/droplet<br></code></pre></td></tr></table></figure><p><strong>Unmounting the remote file system</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo umount <span class="hljs-regexp">/mnt/</span>droplet<br></code></pre></td></tr></table></figure><p><strong>Permanently mounting the remote file system</strong><br><code>This would set a mount point that would persist through restart of both your local machine and droplets</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo nano <span class="hljs-regexp">/etc/</span>fstab &lt;-- edit the <span class="hljs-regexp">/etc/</span>fstab <span class="hljs-keyword">file</span> with a text editor<br>sshfs#root@remotehost:<span class="hljs-regexp">/ /m</span>nt/droplet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql何登成文章笔记</title>
    <link href="/2023/02/12/%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95-%E5%BD%92%E6%A1%A3/"/>
    <url>/2023/02/12/%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95-%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>##冒泡排序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡算法</span><br><span class="hljs-comment"> * Created by xueping.you on 15-8-5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">static</span> Logger logger = LoggerFactory.<span class="hljs-title function_ invoke__">getLogger</span>(BubbleSort.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-keyword">int</span> [] unsortArray)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;unsortArray.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;unsortArray.length-i-<span class="hljs-number">1</span>; j++)&#123;<br>                <span class="hljs-keyword">int</span> temp = unsortArray[j];<br>                <span class="hljs-keyword">if</span>(unsortArray[j]&gt;unsortArray[j+<span class="hljs-number">1</span>])&#123;<br>                    unsortArray[j] = unsortArray[j+<span class="hljs-number">1</span>];<br>                    unsortArray[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">main</span>(String []args)&#123;<br>        <span class="hljs-keyword">int</span> [] <span class="hljs-keyword">array</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">31</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        logger.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;before:&#123;&#125;&quot;</span> , <span class="hljs-keyword">array</span>);<br>        <span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-keyword">array</span>);<br>        logger.<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;after:&#123;&#125;&quot;</span>, <span class="hljs-keyword">array</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>result:<br>19:26:20.928 [main] INFO  com.qyou.data.arithmetic.BubbleSort - before:[12, 10, 2, 45, 31, 56, 1, 9]<br>19:26:20.938 [main] INFO  com.qyou.data.arithmetic.BubbleSort - after:[1, 2, 9, 10, 12, 31, 45, 56]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shadowsocks-安装指南</title>
    <link href="/2023/02/12/shadowsocks-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    <url>/2023/02/12/shadowsocks-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="1-购买阿里云主机"><a href="#1-购买阿里云主机" class="headerlink" title="1.购买阿里云主机"></a>1.购买阿里云主机</h1><pre><code class="hljs">地区选择境外：香港配置可以都选择最低配需要公网ip</code></pre><h1 id="2-配置ssh登录主机"><a href="#2-配置ssh登录主机" class="headerlink" title="2.配置ssh登录主机"></a>2.配置ssh登录主机</h1><pre><code class="hljs">https://zhuanlan.zhihu.com/p/54643053https://blog.csdn.net/liujiakunit/article/details/45849095</code></pre><h1 id="3-环境安装"><a href="#3-环境安装" class="headerlink" title="3.环境安装"></a>3.环境安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">git:<br>yum install git<br><br>apt-get:<br>curl https://raw.githubusercontent.com/dvershinin/apt-get-centos/master/apt-get.sh -o /usr/local/bin/apt-get <br><br>python:<br>apt-get install python36<br><br>pip <br>apt-get install python3-pip<br><br>环境准备:<br>yum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y<br><br>备注：上面执行ok如下可以不做<br>安装 pcre<br>yum install gcc-c++<br>wget    https://netix.dl.sourceforge.net/project/pcre/pcre/8.40/pcre-8.40.tar.gz<br>tar -zxvf   pcre-8.40.tar.gz<br>make  &amp;&amp; make install <br>https://www.jianshu.com/p/2eb60806af9e<br><br>安装 c-ares<br>yum install c-ares<br></code></pre></td></tr></table></figure><h1 id="4-安装Shadowsocks"><a href="#4-安装Shadowsocks" class="headerlink" title="4.安装Shadowsocks"></a>4.安装Shadowsocks</h1><h2 id="4-1-安装-shadowsocks"><a href="#4-1-安装-shadowsocks" class="headerlink" title="4.1.安装 shadowsocks"></a>4.1.安装 shadowsocks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install git+https://github.com/shadowsocks/shadowsocks.git@master<br>配置启动文件<br>&#123;<br> <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br><span class="hljs-string">&quot;local_port&quot;</span>:1080,<br><span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-string">&quot;xxxx&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>,<br> <span class="hljs-string">&quot;timeout&quot;</span>:300,<br><span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-gcm&quot;</span>,<br> <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;plugin&quot;</span>:<span class="hljs-string">&quot;obfs-server&quot;</span>,<br><span class="hljs-string">&quot;plugin_opts&quot;</span>:<span class="hljs-string">&quot;obfs-http&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-或者-shadowsocks-libev（推荐）"><a href="#4-2-或者-shadowsocks-libev（推荐）" class="headerlink" title="4.2.或者 shadowsocks-libev（推荐）"></a>4.2.或者 shadowsocks-libev（推荐）</h2><pre><code class="hljs">    参见（https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/）    </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/shadowsocks/shadowsocks-libev.git<br><span class="hljs-built_in">cd</span> shadowsocks-libev<br>git submodule update --init<br>./autogen.sh &amp;&amp; ./configure --disable-documentation &amp;&amp; make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="4-3配置"><a href="#4-3配置" class="headerlink" title="4.3配置"></a>4.3配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>配置文件：<br>sudo <span class="hljs-built_in">mkdir</span> /etc/shadowsocks-libev<br>sudo vi /etc/shadowsocks-libev/config.json <br>内容：<br>&#123;<br> <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br><span class="hljs-string">&quot;local_port&quot;</span>:1080,<br><span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-string">&quot;xxxx&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;xxxxxxx&quot;</span>,<br> <span class="hljs-string">&quot;timeout&quot;</span>:300,<br><span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;aes-256-gcm&quot;</span>,<br> <span class="hljs-string">&quot;fast_open&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;plugin&quot;</span>:<span class="hljs-string">&quot;obfs-server&quot;</span>,<br><span class="hljs-string">&quot;plugin_opts&quot;</span>:<span class="hljs-string">&quot;obfs-http&quot;</span><br>&#125;<br><br>命令启动：<br>前端启动：ssserver -c /etc/shadowsocks.json；<br>后端启动：ssserver -c /etc/shadowsocks.json -d start；<br>停止：ssserver -c /etc/shadowsocks.json -d stop；<br><br>service启动：<br>创建Shadowsocks-libev.service配置文件<br>sudo vi /etc/systemd/system/shadowsocks.service<br>内容：<br>[Unit]<br>Description=Shadowsocks Server<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -u<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br><br>启动(可以通过systemctl status 查看)：<br>systemctl start shadowsocks<br></code></pre></td></tr></table></figure><p>备注：如果&#x2F;usr&#x2F;bin&#x2F;ss-server不存在可以尝试 ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ss-server &#x2F;usr&#x2F;bin</p><h2 id="4-4-启动obfs-server进程"><a href="#4-4-启动obfs-server进程" class="headerlink" title="4.4.启动obfs-server进程"></a>4.4.启动obfs-server进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">可以先手动启动Telnet验证端口看是否可以用：<br>obfs-server -s 0.0.0.0 -p bbbb --obfs http -r 127.0.0.1:xxxx<br><br>通过service方式启动：<br>创建<br>/etc/systemd/system/obfs-server.service<br>内容：<br>[Unit]<br>Description=obfs-server<br>Documentation=https://obfsf.org/en/<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=obfs-server -s 0.0.0.0 -p bbbb --obfs http -r 127.0.0.1:xxxx<br>Restart=on-abort<br><br>[Install]<br>WantedBy=multi-user.target<br><br>启动(可以通过systemctl status 查看)：<br>systemctl start  obfs-server<br><br></code></pre></td></tr></table></figure><p>备注：<br>        1.如果 &#x2F;user&#x2F;bin&#x2F;obfs-server不存在 可以尝试ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;obfs-server &#x2F;usr&#x2F;bin<br>        2.obfs-server 和 shadowsocks 的 ip 都配置为0.0.0.0</p><h1 id="5-阿里云主机配置shadowsocks-端口转发规则"><a href="#5-阿里云主机配置shadowsocks-端口转发规则" class="headerlink" title="5.阿里云主机配置shadowsocks 端口转发规则"></a>5.阿里云主机配置shadowsocks 端口转发规则</h1><pre><code class="hljs">涉及到的端口都配置一下转发规则</code></pre><h1 id="6-shadowsocks-client-配置"><a href="#6-shadowsocks-client-配置" class="headerlink" title="6.shadowsocks client 配置"></a>6.shadowsocks client 配置</h1><pre><code class="hljs">ip:阿里公网ipport:obfs 端口，如上的bbbbpassword:shadowsocks密码加密方法：shadowsocks对应插件：simple-obfs插件参数：obfs=http</code></pre><h1 id="7-相关网页"><a href="#7-相关网页" class="headerlink" title="7.相关网页"></a>7.相关网页</h1><p><a href="https://zhcexo.com/2018/08/16/how-to-install-simple-obfs/">https://zhcexo.com/2018/08/16/how-to-install-simple-obfs/</a><br><a href="https://www.zhanggaoyuan.com/article/4f7e349a.html">https://www.zhanggaoyuan.com/article/4f7e349a.html</a><br><a href="https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/">https://surginsy.top/post/2020-09-16centos%E5%BB%BA%E7%AB%8Bss/</a><br><a href="https://www.meirenji.info/2019/03/19/%E5%AE%89%E8%A3%85-shadowsocks-libev%E5%90%AF%E7%94%A8-obfs-%E6%B7%B7%E6%B7%86/">https://www.meirenji.info/2019/03/19/%E5%AE%89%E8%A3%85-shadowsocks-libev%E5%90%AF%E7%94%A8-obfs-%E6%B7%B7%E6%B7%86/</a><br><a href="https://732200.xyz/blog/3.html">https://732200.xyz/blog/3.html</a><br><a href="https://github.com/shadowsocks/simple-obfs">https://github.com/shadowsocks/simple-obfs</a><br><a href="https://pdf-lib.org/Home/Details/2788">https://pdf-lib.org/Home/Details/2788</a> libsodium失败可以尝试这个方式<br><a href="https://blog.csdn.net/xukai871105/article/details/72795126">https://blog.csdn.net/xukai871105/article/details/72795126</a> mbedtls 安装失败可以尝试这个方法</p><h1 id="8-其他方法"><a href="#8-其他方法" class="headerlink" title="8.其他方法"></a>8.其他方法</h1><p>使用v2ray配置代理：<a href="https://zwc365.com/hide/shadowsocks-v2ray-plugin.html">https://zwc365.com/hide/shadowsocks-v2ray-plugin.html</a></p>]]></content>
    
    
    <categories>
      
      <category>机场网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shadowsocks</tag>
      
      <tag>翻墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码阅读-01</title>
    <link href="/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/"/>
    <url>/2023/02/12/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-类装载器ClassLoader"><a href="#1-类装载器ClassLoader" class="headerlink" title="1.类装载器ClassLoader"></a>1.类装载器ClassLoader</h1><p>1.类加载器</p><blockquote><p>四种类装载器：根装载器（Bootstrap ClassLoader）、扩展装载器（Extention ClassLoader）应用程序装载器（Application ClassLoader）、自定义装载器（User ClassLoader）<br>JVM 装载类时使用 “全盘负责委托机制”</p></blockquote><p>跟加载器：</p><ul><li>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resources.jar、sun.boot.class.path 负责这些包下面的类，java、javax、sun开头的类（安全考虑）</li><li>没有父加载器</li><li>初始化Extention ClassLoader 和 Application ClassLoader</li></ul><p>扩展加载器：</p><ul><li>jre&#x2F;lib&#x2F;ext目录下加载类库</li></ul><p>应用加载器：</p><ul><li>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</li><li>应用默认加载器</li></ul><p>2.为什么需要自定义装载器？</p><ul><li>类不一定存放在已经设置好的classPath下(有系统类加载器AppClassLoader加载的路径)，对于自定义路中的class类文件的加载，我们需要自己的ClassLoader</li><li>有时我们不一定是从类文件中读取类，可能是从网络的输入流中读取类，这就需要做一些加密和解密操作，这需要自己实现加载类的逻辑，当然其他的特殊处理也同样适用。</li><li>可以定义类的实现机制，实现类的热部署,如OSGi中的bundle模块就是通过实现自己的ClassLoader实现的。</li></ul><p>3.类装载器转载类到JVM步骤</p><ol><li>装载：查找和导入class文件</li><li>链接：执行校验、准备和解析步骤，其中解析步骤是可以选择的<br>a)校验：检查载入Class文件数据的正确性<br>b)准备：给类的静态变量分配存储空间<br>c)解析：将符号引用转成直接应用</li><li>初始化：对类的静态变量，静态代码块执行初始化工作</li></ol><h1 id="2-资源访问接口"><a href="#2-资源访问接口" class="headerlink" title="2.资源访问接口"></a>2.资源访问接口</h1><p>Spring使用Resouce接口访问各种资源， 接口包括 exist()、isOpen()、getURL()、getFile()、getInputStream() 接口，实现接口包括：</p><ul><li>ByteArrayResource:二进制数据表示的资源</li><li>ClassPathResource:类路劲下的资源</li><li>FileSystemResource:文件系统</li><li>InputStreamResource:</li><li>UrlResource:</li><li>ServletContextResource:对应web应用根目录下的资源访问</li></ul><p>资源加载器：通过识别加载资源类型采用不同的资源访问接口进行加载；<br> ResourceLoader-&gt;ResourcePatternResolver-&gt;PathMatchingResourcePatternResolver</p><p>使用Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;classpath:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 因为`classpath:`只在本工程内查找，所以肯定找不到 spring.factories</span><br>        System.out.println(resource.exists()); <span class="hljs-comment">//false</span><br>        <span class="hljs-type">PathMatchingResourcePatternResolver</span> <span class="hljs-variable">resourcePatternResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>();<br>        Resource[] resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/spring.factories&quot;</span>);<br>        <span class="hljs-comment">// 它会去找所有的jar包的类路径开始查找，所以现在是可议找到多个的~~~</span><br>        System.out.println(resources.length); <span class="hljs-comment">//2</span><br>        System.out.println(Arrays.asList(resources));<br>        <span class="hljs-comment">//[URL [jar:file:/E:/repository/org/springframework/spring-beans/5.0.6.RELEASE/spring-beans-5.0.6.RELEASE.jar!/META-INF/spring.factories],</span><br>        <span class="hljs-comment">//URL [jar:file:/E:/repository/org/springframework/spring-test/5.0.6.RELEASE/spring-test-5.0.6.RELEASE.jar!/META-INF/spring.factories]]</span><br>        <span class="hljs-comment">// 还能使用Ant风格进行匹配~~~  太强大了：</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:META-INF/*.factories&quot;</span>);<br>        System.out.println(resources); <span class="hljs-comment">// 能匹配上所有了路径下，`META-INF/*.factories`匹配上的所有文件</span><br>        resources = resourcePatternResolver.getResources(<span class="hljs-string">&quot;classpath*:com/fsx/**/*.class&quot;</span>);<br>        System.out.println(resources.length); <span class="hljs-comment">//42 相当于把我当前项目所有的类都拿出来了</span><br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="3-BeanFactory-和-ApplicationContext"><a href="#3-BeanFactory-和-ApplicationContext" class="headerlink" title="3.BeanFactory 和 ApplicationContext"></a>3.BeanFactory 和 ApplicationContext</h1><p>Spring通过配置文件描述Bean 及Bean之间的依赖关系，利用Java语言的反射功能实例化Bean 并建立Bean之间的依赖关系，Spring的IoC容器在完成这些底层功能基础上还提供了Bean实例缓存、生命周期管理、Bean实例代理、事件发布、资源装载等高级服务，BeanFactory是Spring最核心的接口，ApplicationContext建立在BeanFactory之上提供更多面向应用的功能；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/12/hello-world/"/>
    <url>/2023/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
